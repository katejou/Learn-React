{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\source\\\\repos\\\\Learning\\\\React\\\\hello-world\\\\src\\\\PassValueAcrossGen\\\\Baby2.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\n// 不加上面那一行，監控 props 的那一行，不佑道為什麼有紅線，功能是都沒影響啦。\nimport React, { useState, useEffect } from 'react'; // 和隔壁的Baby(class component)對比\n// 這個是 function compoent\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Baby2 = props => {\n  _s();\n\n  //這個 Baby2 的方法，接收 props 的參數\n\n  /* 把state變成useState */\n  const [isGetData, setGetData] = useState(false);\n  const [Mom, setMom] = useState(\"\");\n  const [isRightDad, setRightDad] = useState(false);\n  const [changeDad, setchangeDad] = useState(false); // useState 是什麼？\n  // 官網解釋︰const [state, setState] = useState(initialState);\n  // 簡化宣告變數，設定初始值及其更改變數的方法。\n\n  /* 把class 的 member function改成「function中的function」 */\n  // 單寫這個方法，在孩子出生後，也不會被自動觸發去找媽媽。\n\n  const ajaxSimulator = () => {\n    setTimeout(() => {\n      setGetData(true);\n      setMom(\"May\");\n    }, 3000);\n  }; // 它放的位置是有講究的，不能放在 If 後面\n\n\n  useEffect(() => {\n    ajaxSimulator();\n    /* 上面是 componentDidMount (因為它沒有加入監控的元素)*/\n\n    document.getElementById(\"talk\").append('哇!');\n    return () => {\n      document.getElementById(\"talk\").innerHTML = \"\";\n      /* 上面是 componentWillUnmount */\n    }; // 在這個小孩被收回去的時候，把他說過的都一起消失\n    // 不加的話，會一直哇!哇!哇!哇!哇!\n  }, []); // 單寫這個方法，會無法召喚多次。只有第一次生成才會跑。\n  // 為什麼加了下面這一行就不紅線了呢？奇怪。\n\n  const checkDad = () => {\n    if (props.dad === \"Chang\") setRightDad(true);else setRightDad(false);\n  }; // 可以放多個 UseEffect 是這個意思\n\n\n  useEffect(() => {\n    if (changeDad === false) {\n      checkDad();\n      setchangeDad(true);\n      /* 上面是 componentDidMount  (初次)*/\n    } else {\n      checkDad();\n      document.getElementById(\"talk\").append('我換了個爸爸！');\n    }\n    /* 上面是 componentDidUpdate (非初次之後，)*/\n\n  }, [props.dad]);\n  /* 加入監控的props.dad */\n  // 注意︰App中的換爸爸按鈕，不會觸發「媽媽的讀取」，因為isGetData沒有在監察之中。\n  // 而且「讀取媽媽的方法」ajaxSimulator() 也沒有放進來。\n  // 這就是為什麼 useEffect 要分開多個。\n\n  if (isRightDad === false) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u6211\\u7238\\u662F\\u8001\\u738B\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);else if (isGetData === false) //是生父，就去找媽媽，但還沒找到\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"msg\",\n      children: \"\\u6211\\u7238\\u662F\\u6B63\\u78BA\\u7684\\u5F35\\u5148\\u751F\\uFF0C\\u5ABD\\u5ABD\\u8B80\\u53D6\\u4E2D\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this);else // 找到媽媽了。\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"msg\",\n      children: [\"\\u6211\\u7238\\u662F\\u6B63\\u78BA\\u7684\\u5F35\\u5148\\u751F\\uFF0C\\u5F35\\u592A\\u592A\\u662F\", Mom]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this); // 這個方法中，唯一個If else，可能是因為涉及return ，所以分開多個if else 就會出錯。\n};\n\n_s(Baby2, \"ZYO4F82EtgkQfbkSxPyjl1aAeEs=\");\n\n_c = Baby2;\nexport default Baby2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Baby2\");","map":{"version":3,"names":["React","useState","useEffect","Baby2","props","isGetData","setGetData","Mom","setMom","isRightDad","setRightDad","changeDad","setchangeDad","ajaxSimulator","setTimeout","document","getElementById","append","innerHTML","checkDad","dad"],"sources":["C:/Users/User/source/repos/Learning/React/hello-world/src/PassValueAcrossGen/Baby2.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n// 不加上面那一行，監控 props 的那一行，不佑道為什麼有紅線，功能是都沒影響啦。\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// 和隔壁的Baby(class component)對比\r\n// 這個是 function compoent\r\nconst Baby2 = (props) => { //這個 Baby2 的方法，接收 props 的參數\r\n\r\n    /* 把state變成useState */\r\n\r\n    const [isGetData, setGetData] = useState(false);\r\n    const [Mom, setMom] = useState(\"\");\r\n    const [isRightDad, setRightDad] = useState(false);\r\n    const [changeDad, setchangeDad] = useState(false);\r\n\r\n    // useState 是什麼？\r\n    // 官網解釋︰const [state, setState] = useState(initialState);\r\n    // 簡化宣告變數，設定初始值及其更改變數的方法。\r\n\r\n    /* 把class 的 member function改成「function中的function」 */\r\n\r\n    // 單寫這個方法，在孩子出生後，也不會被自動觸發去找媽媽。\r\n    const ajaxSimulator = () => {\r\n        setTimeout(() => {\r\n            setGetData(true);\r\n            setMom(\"May\");\r\n        }, 3000)\r\n    }\r\n    // 它放的位置是有講究的，不能放在 If 後面\r\n    useEffect(() => {\r\n        ajaxSimulator();\r\n        /* 上面是 componentDidMount (因為它沒有加入監控的元素)*/\r\n        document.getElementById(\"talk\").append('哇!')\r\n        return (() => {\r\n            document.getElementById(\"talk\").innerHTML = \"\";\r\n            /* 上面是 componentWillUnmount */\r\n        })\r\n        // 在這個小孩被收回去的時候，把他說過的都一起消失\r\n        // 不加的話，會一直哇!哇!哇!哇!哇!\r\n\r\n    }, []);\r\n\r\n    // 單寫這個方法，會無法召喚多次。只有第一次生成才會跑。\r\n    // 為什麼加了下面這一行就不紅線了呢？奇怪。\r\n    const checkDad = () => {\r\n        if (props.dad === \"Chang\")\r\n            setRightDad(true)\r\n        else\r\n            setRightDad(false)\r\n    }\r\n\r\n    // 可以放多個 UseEffect 是這個意思\r\n    useEffect(() => {\r\n\r\n        if (changeDad === false){\r\n            checkDad()\r\n            setchangeDad(true)\r\n        /* 上面是 componentDidMount  (初次)*/ \r\n        }\r\n        else{\r\n            checkDad()\r\n            document.getElementById(\"talk\").append('我換了個爸爸！')\r\n        }\r\n        /* 上面是 componentDidUpdate (非初次之後，)*/ \r\n        \r\n    }, [ props.dad ]); /* 加入監控的props.dad */\r\n\r\n// 注意︰App中的換爸爸按鈕，不會觸發「媽媽的讀取」，因為isGetData沒有在監察之中。\r\n// 而且「讀取媽媽的方法」ajaxSimulator() 也沒有放進來。\r\n// 這就是為什麼 useEffect 要分開多個。\r\n\r\nif (isRightDad === false)\r\n    return (\r\n        <div>我爸是老王</div>\r\n    );\r\nelse if (isGetData === false)//是生父，就去找媽媽，但還沒找到\r\n    return (\r\n        <div id=\"msg\">我爸是正確的張先生，媽媽讀取中…</div>\r\n    );\r\nelse// 找到媽媽了。\r\n    return (\r\n        <div id=\"msg\">我爸是正確的張先生，張太太是{Mom}</div>\r\n    );\r\n\r\n    // 這個方法中，唯一個If else，可能是因為涉及return ，所以分開多個if else 就會出錯。\r\n\r\n}\r\nexport default Baby2;"],"mappings":";;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;AACA;;;;AACA,MAAMC,KAAK,GAAIC,KAAD,IAAW;EAAA;;EAAE;;EAEvB;EAEA,MAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAM,CAACM,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,EAAD,CAA9B;EACA,MAAM,CAACQ,UAAD,EAAaC,WAAb,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C,CAPqB,CASrB;EACA;EACA;;EAEA;EAEA;;EACA,MAAMY,aAAa,GAAG,MAAM;IACxBC,UAAU,CAAC,MAAM;MACbR,UAAU,CAAC,IAAD,CAAV;MACAE,MAAM,CAAC,KAAD,CAAN;IACH,CAHS,EAGP,IAHO,CAAV;EAIH,CALD,CAhBqB,CAsBrB;;;EACAN,SAAS,CAAC,MAAM;IACZW,aAAa;IACb;;IACAE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,MAAhC,CAAuC,IAAvC;IACA,OAAQ,MAAM;MACVF,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCE,SAAhC,GAA4C,EAA5C;MACA;IACH,CAHD,CAJY,CAQZ;IACA;EAEH,CAXQ,EAWN,EAXM,CAAT,CAvBqB,CAoCrB;EACA;;EACA,MAAMC,QAAQ,GAAG,MAAM;IACnB,IAAIf,KAAK,CAACgB,GAAN,KAAc,OAAlB,EACIV,WAAW,CAAC,IAAD,CAAX,CADJ,KAGIA,WAAW,CAAC,KAAD,CAAX;EACP,CALD,CAtCqB,CA6CrB;;;EACAR,SAAS,CAAC,MAAM;IAEZ,IAAIS,SAAS,KAAK,KAAlB,EAAwB;MACpBQ,QAAQ;MACRP,YAAY,CAAC,IAAD,CAAZ;MACJ;IACC,CAJD,MAKI;MACAO,QAAQ;MACRJ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,MAAhC,CAAuC,SAAvC;IACH;IACD;;EAEH,CAbQ,EAaN,CAAEb,KAAK,CAACgB,GAAR,CAbM,CAAT;EAamB;EAEvB;EACA;EACA;;EAEA,IAAIX,UAAU,KAAK,KAAnB,EACI,oBACI;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ,CADJ,KAIK,IAAIJ,SAAS,KAAK,KAAlB,EAAwB;IACzB,oBACI;MAAK,EAAE,EAAC,KAAR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,CADC,KAID;IACA,oBACI;MAAK,EAAE,EAAC,KAAR;MAAA,mGAA6BE,GAA7B;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,CA1EqB,CA8ErB;AAEH,CAhFD;;GAAMJ,K;;KAAAA,K;AAiFN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}