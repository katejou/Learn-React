{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\source\\\\repos\\\\Learning\\\\React\\\\hello-world\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport './index.css'; //import App from './App';\n\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root')); // JSX 語法？\n// 1.\n// const element = <h1>Hello world!!!!!</h1>;\n// root.render(element);\n// 2.\n// const element = <button>大家好</button>\n// root.render(element);\n// 3.\n// const element =()=>{\n//   return( <button>大家好</button> );\n// }\n// root.render(element());\n// 4.\n// const testFunction =()=> {\n//   return( \n//       <div> \n//           <button> 大家好 </button>\n//           <h1> 我很好 </h1>\n//       </div>\n//   );\n// }\n// // 一定要加 div 將兩個 DOM 包成一個。\n// root.render(testFunction());\n// 5.\n// 在JSX中需要用到javascript的變數/函式...時，就要用{}包起來\n// const showOne = true;\n// root.render(\n//     <h1> { (showOne === true) ? 1 : 0 } </h1>\n// );\n// 6.\n// 字串中，放入字串{}\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// root.render(\n//   <h1 style = { styleArgument } > Hello, world! </h1>\n// );\n// HTML之中放入字串？\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// const element = <h1 style = { styleArgument } > Hello, world! </h1>;\n// root.render(element);\n// {{}} : 在HTML之中，表示\"\"指定屬性的字串？ X 下方用來指定class的也不是這樣…\n// 外面那層括號代表裡面是javascript語法，裡面的括號表示物件型態 <- 還是看不懂\n// 反正記得 style = {{}}\n// const element = <h1 style = { { fontSize: '100px', color: 'red' } } > Hello, world! </h1>;\n// root.render(element);\n// 7.\n// 「class」屬性變成「className」\n// const element = <h1 className = \"title\" > Hello, world! </h1>\n// root.render(element);\n// 8.\n// 透過JSX結合javascript運算式\n// 迴圈\n// const multiButton=()=>{\n//   var output=[];\n//   for(let i=0;i<4;++i)\n//       output.push(<button>我是第{i+1}個按鍵</button>)\n//   return output;\n// }\n// root.render(multiButton());\n// 9. 屬性給布林值，true的話，可直接省略。(最終都會render成true)\n// 死記 value 是 {}，style 是 {{}} ???\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value={true} > 是 </button>\n//           <br/>\n//           <button value > 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// 10. onClick , C要大寫。和value一樣要 = {}\n// onChange 同理，因為JSX都是駝峰字。\n// 方法所收的都是event，event.target就是該呼叫的元素…\n// const getValue=(event)=>{\n//   console.log(event.target.value)\n//   alert(event.target.value);\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={getValue}> 是(value=true) </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// 11. 箭頭函式\n\nconst myFunction1 = event => {\n  console.log(\"F1\");\n  alert(\"F1\");\n};\n\nconst myFunction2 = event => {\n  //alert(event.target.value); // 小心，(e)=> 根本沒有event的傳入\n  console.log(\"F2\");\n  alert(\"F2\");\n};\n\nconst element = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      value: true,\n      onClick: e => {\n        myFunction1();\n        myFunction2();\n      },\n      children: \" \\u662F \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\nroot.render(element()); // 在瀏覽器的F12看不可元素上依附的onclick方法，但做還是會做…\n// React這樣做，比較沒有那麼容易給「使用者」看穿﹑亂改﹑找漏洞。\n// 還比較好去編輯？(我想是優點吧。)\n// 箭頭函式 : 想傳什麼參數、使用幾個函式、做什麼運算都可以。缺點是很容易讓版面看起來很亂。\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","scryRenderedDOMComponentsWithClass","reportWebVitals","root","createRoot","document","getElementById","myFunction1","event","console","log","alert","myFunction2","element","e","render"],"sources":["C:/Users/User/source/repos/Learning/React/hello-world/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport './index.css';\n//import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\n\n// JSX 語法？\n\n// 1.\n// const element = <h1>Hello world!!!!!</h1>;\n// root.render(element);\n\n// 2.\n// const element = <button>大家好</button>\n// root.render(element);\n\n// 3.\n// const element =()=>{\n//   return( <button>大家好</button> );\n// }\n// root.render(element());\n\n// 4.\n// const testFunction =()=> {\n//   return( \n//       <div> \n//           <button> 大家好 </button>\n//           <h1> 我很好 </h1>\n//       </div>\n//   );\n// }\n// // 一定要加 div 將兩個 DOM 包成一個。\n// root.render(testFunction());\n\n// 5.\n// 在JSX中需要用到javascript的變數/函式...時，就要用{}包起來\n// const showOne = true;\n// root.render(\n//     <h1> { (showOne === true) ? 1 : 0 } </h1>\n// );\n\n// 6.\n// 字串中，放入字串{}\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// root.render(\n//   <h1 style = { styleArgument } > Hello, world! </h1>\n// );\n\n// HTML之中放入字串？\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// const element = <h1 style = { styleArgument } > Hello, world! </h1>;\n// root.render(element);\n\n// {{}} : 在HTML之中，表示\"\"指定屬性的字串？ X 下方用來指定class的也不是這樣…\n// 外面那層括號代表裡面是javascript語法，裡面的括號表示物件型態 <- 還是看不懂\n// 反正記得 style = {{}}\n// const element = <h1 style = { { fontSize: '100px', color: 'red' } } > Hello, world! </h1>;\n// root.render(element);\n\n\n// 7.\n// 「class」屬性變成「className」\n// const element = <h1 className = \"title\" > Hello, world! </h1>\n// root.render(element);\n\n// 8.\n// 透過JSX結合javascript運算式\n// 迴圈\n// const multiButton=()=>{\n//   var output=[];\n\n//   for(let i=0;i<4;++i)\n//       output.push(<button>我是第{i+1}個按鍵</button>)\n\n//   return output;\n// }\n// root.render(multiButton());\n\n\n// 9. 屬性給布林值，true的話，可直接省略。(最終都會render成true)\n// 死記 value 是 {}，style 是 {{}} ???\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value={true} > 是 </button>\n//           <br/>\n//           <button value > 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n\n// 10. onClick , C要大寫。和value一樣要 = {}\n// onChange 同理，因為JSX都是駝峰字。\n// 方法所收的都是event，event.target就是該呼叫的元素…\n\n// const getValue=(event)=>{\n//   console.log(event.target.value)\n//   alert(event.target.value);\n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={getValue}> 是(value=true) </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// 11. 箭頭函式\n\nconst myFunction1=(event)=>{\n  console.log(\"F1\");\n  alert(\"F1\");\n}\n\nconst myFunction2=(event)=>{\n  //alert(event.target.value); // 小心，(e)=> 根本沒有event的傳入\n  console.log(\"F2\");\n  alert(\"F2\");\n  \n}\n\nconst element = () =>\n{\n  return(\n    <div>\n          <button value onClick={(e)=>{ myFunction1();myFunction2()}}> 是 </button>\n    </div>\n  );\n}\n\nroot.render(element());\n\n// 在瀏覽器的F12看不可元素上依附的onclick方法，但做還是會做…\n// React這樣做，比較沒有那麼容易給「使用者」看穿﹑亂改﹑找漏洞。\n// 還比較好去編輯？(我想是優點吧。)\n\n// 箭頭函式 : 想傳什麼參數、使用幾個函式、做什麼運算都可以。缺點是很容易讓版面看起來很亂。\n\n\n\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,kCAAT,QAAmD,sBAAnD;AACA,OAAO,aAAP,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,IAAI,GAAGH,QAAQ,CAACI,UAAT,CACXC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADW,CAAb,C,CAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,MAAMC,WAAW,GAAEC,KAAD,IAAS;EACzBC,OAAO,CAACC,GAAR,CAAY,IAAZ;EACAC,KAAK,CAAC,IAAD,CAAL;AACD,CAHD;;AAKA,MAAMC,WAAW,GAAEJ,KAAD,IAAS;EACzB;EACAC,OAAO,CAACC,GAAR,CAAY,IAAZ;EACAC,KAAK,CAAC,IAAD,CAAL;AAED,CALD;;AAOA,MAAME,OAAO,GAAG,MAChB;EACE,oBACE;IAAA,uBACM;MAAQ,KAAK,MAAb;MAAc,OAAO,EAAGC,CAAD,IAAK;QAAEP,WAAW;QAAGK,WAAW;MAAG,CAA1D;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADN;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAPD;;AASAT,IAAI,CAACY,MAAL,CAAYF,OAAO,EAAnB,E,CAEA;AACA;AACA;AAEA;AAUA;AACA;AACA;;AAEAX,eAAe"},"metadata":{},"sourceType":"module"}