{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nconst root = ReactDOM.createRoot(document.getElementById('root')); // JSX 語法\n// #region  1. Hello world! 將 DOM 元素，render 進 index.html\n// const element = <h1>Hello world!!!!!</h1>;\n// root.render(element);\n// #endregion 1\n// #region  2.  同上\n// const element = <button>大家好</button>\n// root.render(element);\n// #endregion 2\n// #region  3. 傳入方法 ()=>\n// const element =()=>{\n//   return( <button>大家好</button> );\n// }\n// root.render(element());\n// #endregion 3\n// #region  4. 傳入方法 ()=> 只能 return 一個元素\n// const testFunction =()=> {\n//   return( \n//       <div> \n//           <button> 大家好 </button>\n//           <h1> 我很好 </h1>\n//       </div>\n//   );\n// }\n// // 一定要加 div 將兩個 DOM 包成一個。\n// root.render(testFunction());\n// #endregion\n// #region  5. 在JSX中需要用到javascript的變數/函式...時，就要用{}包起來\n// const showOne = true;\n// root.render(\n//     <h1> { (showOne === true) ? 1 : 0 } </h1>\n// );\n//#endregion 5\n// #region  6. 設定字串 > 字串中，放入字串{}\n// 字串中，放入字串{}\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// root.render(\n//   <h1 style = { styleArgument } > Hello, world! </h1>\n// );\n//  #endregion  6\n// #region  6.5. 反正記得 style = {{}}\n// HTML之中放入字串？\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// const element = <h1 style = { styleArgument } > Hello, world! </h1>;\n// root.render(element);\n// {{}} : 在HTML之中，表示\"\"指定屬性的字串？ X 下方用來指定class的也不是這樣…\n// 外面那層括號代表裡面是javascript語法，裡面的括號表示物件型態 <- 還是看不懂\n// 反正記得 style = {{}}\n// const element = <h1 style = { { fontSize: '100px', color: 'red' } } > Hello, world! </h1>;\n// root.render(element);\n// #endregion 6.5\n// #region  7. 設定 DOM 屬性時 「class」屬性變成「className」\n// const element = <h1 className = \"title\" > Hello, world! </h1>\n// root.render(element);\n// #endregion 7\n// #region  8. 透過JSX結合javascript運算式\n// 例子︰迴圈\n// const multiButton=()=>{\n//   var output=[];\n//   for(let i=0;i<4;++i)\n//       output.push(<button>我是第{i+1}個按鍵</button>)\n//   return output;\n// }\n// root.render(multiButton());\n// #endregion 8\n// #region  9. 屬性給布林值，true的話，可直接省略。(最終都會render成true)\n// 死記 value 是 {}，style 是 {{}} ???\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value={true} > 是 </button>\n//           <br/>\n//           <button value > 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// #endregion 9\n// #region  10. onClick , C要大寫。和value一樣要 = {}\n// onChange 同理，因為JSX都是駝峰字。\n// 方法所收的都是event，event.target就是該呼叫的元素…\n// const getValue=(event)=>{\n//   console.log(event.target.value)\n//   alert(event.target.value);\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={getValue}> 是(value=true) </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// #endregion 10\n// #region  11. 箭頭函式 包入多個 function\n// const myFunction1=(event)=>{ // event可略\n//   console.log(\"F1\");\n//   alert(\"F1\");\n// }\n// const myFunction2=(event)=>{\n//   //alert(event.target.value); // 小心，(e)=> 根本沒有event的傳入\n//   console.log(\"F2\");\n//   alert(\"F2\");\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1();myFunction2()}}> 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// 在瀏覽器的F12看不到元素上依附的onclick方法，但做還是會做…\n// React這樣做，比較沒有那麼容易給「使用者」看穿﹑亂改﹑找漏洞?\n// 還比較好去編輯？(我想是優點吧。)\n// 箭頭函式 : 想傳什麼參數、使用幾個函式、做什麼運算都可以。缺點是很容易讓版面看起來很亂。\n// #endregion  11\n// #region  11.5  另一個傳入值，而不是傳入 event 的方法\n// const myFunction1=(val)=>{\n//   console.log(val);\n//   alert(val);\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1(e.target.value);}}> 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// 在JSX綁定js資料、函式時，一定要加上{}\n// 剛開始很容易照以前的習慣直接用屬性=\"綁上去的東西\"\n// 這樣的話等同於在傳字串。\n// #endregion 11.5\n// #region React Component (自訂元素) 簡介\n// 這個語法讓我們可以把程式碼以函式(或是class，後面會提到)包成模組，\n// 變成一個自己訂作的元素，\n// 然後用跟使用button、div這些元素一樣的語法在JSX中使用\n// 元素名稱第一個字母必須要是大寫、和函式(或class)名稱相同\n// #endregion\n// #region  1. 簡單例子\n// function App(){\n//   return(\n//     <button>大家好</button>\n//   );\n// }\n// root.render(\n//     <div>\n//           <App/>\n//   </div>\n// );\n// #endregion 1\n// #region  2. 可重覆使用\n// function Progress(){\n//   const barWidth=\"50%\";\n//   return(\n//       <div>\n//           <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//           <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:barWidth,height:\"100%\",borderRadius:\"10px\"}}></div>\n//       </div>\n//     </div>\n//   );\n// }\n// root.render(\n//       <Progress/>\n//       <Progress/>\n// );\n// #endregion\n// #region  3. 從鄰檔引用自訂元素\n// 上方要︰import App from './App';\n// 意思是指將隔壁 App.js 的 App 方法引用進來。供下方使用\n//root.render(<App/>);\n// #endregion 3\n// props \n// 自訂元素 中的 自訂Attribute\n// 也要去改 App.js 這個檔案\n// 1.\n//root.render(<div><App name='大家好'/></div>);\n// 傳接資料的型別問題\n// 文字''/\"\"\n//root.render(<div><App number=\"87\" getData=\"true\"/></div>);\n// 其他型別 {}\n//root.render(<div><App number={87} getData={true}/></div>);\n// 使用變數? props是唯讀\n// 他說︰有的時候我們就是想要在元件自己這更改props，這個時候就要用比較迂迴的做法。我們會在後面講...\n// 將onClick會做的事，傳到寫好的自訂元件\n// 2.\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n//3. 在react component中，我們把包在標籤中間的東西，稱為children。\n// <元素名稱> (其他的東西) </元素名稱>\n//  (其他的東西) = children\n// root.render(<div><App> children </App></div>);\n// 不同的children間能互相影響，和一個叫state的東東有關係，但作者還是說之後再……\n// ------------------\n// Function component 為上述\n// class component 為下述\n// ------------------\n// class component\n// 用 class 的自訂元素\n// #region  1. 使用render方法\n//root.render(<App/>);\n// #endregion 1\n// #region  2. 傳 props 值\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n//#endregion 2\n// #region  3. 會跑，但是不會有改變，只會看到 log 中的 hey\n// const changeName=(newName)=>{ \n//   name=newName;\n//   console.log(\"hey\")//加入此行\n// }\n// var name=\"舊的名字\";\n// root.render(\n//     <div>\n//         <App name={name} handleClick={changeName}/> \n//         {/* 就算是 changeName(\"新的名字\") 也傳不入參數，程式會死，連log都不寫 */}\n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n// #endregion 3\n// #region  4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n// 詳見 App.js\n// root.render(\n//     <div>\n//         <App/> \n//     </div>\n// );\n//  #endregion 4\n// #region   5. 多一個進度條的練習\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n//#endregion 5\n// #region   6. state 的特性\n// 詳見App.js\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n//#endregion  6\n\n/* #region   7. useState   */\n// React hook出現了，\n// 它提供一系列讓你能在function component中使用「在class component常用的功能」的方法，\n// useState就是其中之一。\n//const [percent, changePercent] = useState(\"20%\");\n// 我們宣告了一個變數和一個函式，第一個percent是變數\n// 而第二個 changePercent 變成了等同於 (值)=>{this.setState({percent:值})}\n// 函式在語法上沒有限定命名原則，但一般會以 set 做為開頭 changePercent -> setPercent\n// useState只是一個函式，它會接收一作為初始值的參數並回傳一個包含兩個值的array，第一個值是state、第二個值是用來對剛那個state做setState的函式\n// const [percent, changePercent]=，是利用javascript的解構賦值\n\n/*#endregion 7 */\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","scryRenderedDOMComponentsWithClass","App","reportWebVitals","root","createRoot","document","getElementById"],"sources":["C:/Users/User/source/repos/Learning/React/hello-world/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\n\n// JSX 語法\n\n// #region  1. Hello world! 將 DOM 元素，render 進 index.html\n\n// const element = <h1>Hello world!!!!!</h1>;\n// root.render(element);\n\n// #endregion 1\n\n// #region  2.  同上\n\n// const element = <button>大家好</button>\n// root.render(element);\n\n// #endregion 2\n\n// #region  3. 傳入方法 ()=>\n\n// const element =()=>{\n//   return( <button>大家好</button> );\n// }\n// root.render(element());\n\n// #endregion 3\n\n// #region  4. 傳入方法 ()=> 只能 return 一個元素\n\n// const testFunction =()=> {\n//   return( \n//       <div> \n//           <button> 大家好 </button>\n//           <h1> 我很好 </h1>\n//       </div>\n//   );\n// }\n// // 一定要加 div 將兩個 DOM 包成一個。\n// root.render(testFunction());\n\n// #endregion\n\n// #region  5. 在JSX中需要用到javascript的變數/函式...時，就要用{}包起來\n\n// const showOne = true;\n// root.render(\n//     <h1> { (showOne === true) ? 1 : 0 } </h1>\n// );\n\n//#endregion 5\n\n// #region  6. 設定字串 > 字串中，放入字串{}\n\n// 字串中，放入字串{}\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// root.render(\n//   <h1 style = { styleArgument } > Hello, world! </h1>\n// );\n\n//  #endregion  6\n\n// #region  6.5. 反正記得 style = {{}}\n\n// HTML之中放入字串？\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// const element = <h1 style = { styleArgument } > Hello, world! </h1>;\n// root.render(element);\n\n// {{}} : 在HTML之中，表示\"\"指定屬性的字串？ X 下方用來指定class的也不是這樣…\n// 外面那層括號代表裡面是javascript語法，裡面的括號表示物件型態 <- 還是看不懂\n// 反正記得 style = {{}}\n// const element = <h1 style = { { fontSize: '100px', color: 'red' } } > Hello, world! </h1>;\n// root.render(element);\n\n// #endregion 6.5\n\n// #region  7. 設定 DOM 屬性時 「class」屬性變成「className」\n\n// const element = <h1 className = \"title\" > Hello, world! </h1>\n// root.render(element);\n\n// #endregion 7\n\n// #region  8. 透過JSX結合javascript運算式\n\n// 例子︰迴圈\n\n// const multiButton=()=>{\n//   var output=[];\n\n//   for(let i=0;i<4;++i)\n//       output.push(<button>我是第{i+1}個按鍵</button>)\n\n//   return output;\n// }\n\n// root.render(multiButton());\n\n// #endregion 8\n\n// #region  9. 屬性給布林值，true的話，可直接省略。(最終都會render成true)\n\n// 死記 value 是 {}，style 是 {{}} ???\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value={true} > 是 </button>\n//           <br/>\n//           <button value > 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n\n// #endregion 9\n\n// #region  10. onClick , C要大寫。和value一樣要 = {}\n\n// onChange 同理，因為JSX都是駝峰字。\n// 方法所收的都是event，event.target就是該呼叫的元素…\n\n// const getValue=(event)=>{\n//   console.log(event.target.value)\n//   alert(event.target.value);\n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={getValue}> 是(value=true) </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// #endregion 10\n\n// #region  11. 箭頭函式 包入多個 function\n\n// const myFunction1=(event)=>{ // event可略\n//   console.log(\"F1\");\n//   alert(\"F1\");\n// }\n\n// const myFunction2=(event)=>{\n//   //alert(event.target.value); // 小心，(e)=> 根本沒有event的傳入\n//   console.log(\"F2\");\n//   alert(\"F2\");\n  \n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1();myFunction2()}}> 是 </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// 在瀏覽器的F12看不到元素上依附的onclick方法，但做還是會做…\n// React這樣做，比較沒有那麼容易給「使用者」看穿﹑亂改﹑找漏洞?\n// 還比較好去編輯？(我想是優點吧。)\n\n// 箭頭函式 : 想傳什麼參數、使用幾個函式、做什麼運算都可以。缺點是很容易讓版面看起來很亂。\n\n// #endregion  11\n\n// #region  11.5  另一個傳入值，而不是傳入 event 的方法\n\n// const myFunction1=(val)=>{\n//   console.log(val);\n//   alert(val);\n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1(e.target.value);}}> 是 </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// 在JSX綁定js資料、函式時，一定要加上{}\n// 剛開始很容易照以前的習慣直接用屬性=\"綁上去的東西\"\n// 這樣的話等同於在傳字串。\n\n// #endregion 11.5\n\n// #region React Component (自訂元素) 簡介\n\n// 這個語法讓我們可以把程式碼以函式(或是class，後面會提到)包成模組，\n// 變成一個自己訂作的元素，\n// 然後用跟使用button、div這些元素一樣的語法在JSX中使用\n\n// 元素名稱第一個字母必須要是大寫、和函式(或class)名稱相同\n\n// #endregion\n\n// #region  1. 簡單例子\n\n// function App(){\n//   return(\n//     <button>大家好</button>\n//   );\n// }\n\n// root.render(\n     \n//     <div>\n//           <App/>\n//   </div>\n\n// );\n\n// #endregion 1\n\n// #region  2. 可重覆使用\n\n// function Progress(){\n//   const barWidth=\"50%\";\n//   return(\n//       <div>\n//           <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//           <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:barWidth,height:\"100%\",borderRadius:\"10px\"}}></div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// root.render(\n//       <Progress/>\n//       <Progress/>\n// );\n\n// #endregion\n\n// #region  3. 從鄰檔引用自訂元素\n\n// 上方要︰import App from './App';\n// 意思是指將隔壁 App.js 的 App 方法引用進來。供下方使用\n//root.render(<App/>);\n\n// #endregion 3\n\n// props \n// 自訂元素 中的 自訂Attribute\n// 也要去改 App.js 這個檔案\n\n// 1.\n//root.render(<div><App name='大家好'/></div>);\n\n// 傳接資料的型別問題\n// 文字''/\"\"\n//root.render(<div><App number=\"87\" getData=\"true\"/></div>);\n// 其他型別 {}\n//root.render(<div><App number={87} getData={true}/></div>);\n\n// 使用變數? props是唯讀\n// 他說︰有的時候我們就是想要在元件自己這更改props，這個時候就要用比較迂迴的做法。我們會在後面講...\n\n// 將onClick會做的事，傳到寫好的自訂元件\n\n// 2.\n\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n\n// root.render(\n\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div>\n  \n// );\n\n//3. 在react component中，我們把包在標籤中間的東西，稱為children。\n// <元素名稱> (其他的東西) </元素名稱>\n//  (其他的東西) = children\n\n// root.render(<div><App> children </App></div>);\n\n// 不同的children間能互相影響，和一個叫state的東東有關係，但作者還是說之後再……\n\n// ------------------\n// Function component 為上述\n// class component 為下述\n// ------------------\n// class component\n// 用 class 的自訂元素\n\n// #region  1. 使用render方法\n\n//root.render(<App/>);\n\n// #endregion 1\n\n// #region  2. 傳 props 值\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n\n//#endregion 2\n\n// #region  3. 會跑，但是不會有改變，只會看到 log 中的 hey\n\n// const changeName=(newName)=>{ \n//   name=newName;\n//   console.log(\"hey\")//加入此行\n// }\n\n// var name=\"舊的名字\";\n\n// root.render(\n//     <div>\n//         <App name={name} handleClick={changeName}/> \n//         {/* 就算是 changeName(\"新的名字\") 也傳不入參數，程式會死，連log都不寫 */}\n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n\n// #endregion 3\n\n// #region  4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n\n// 詳見 App.js\n// root.render(\n//     <div>\n//         <App/> \n//     </div>\n// );\n\n//  #endregion 4\n\n// #region   5. 多一個進度條的練習\n\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n\n//#endregion 5\n\n// #region   6. state 的特性\n\n// 詳見App.js\n\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n\n//#endregion  6\n\n/* #region   7. useState   */ \n// React hook出現了，\n// 它提供一系列讓你能在function component中使用「在class component常用的功能」的方法，\n// useState就是其中之一。\n\n//const [percent, changePercent] = useState(\"20%\");\n// 我們宣告了一個變數和一個函式，第一個percent是變數\n// 而第二個 changePercent 變成了等同於 (值)=>{this.setState({percent:值})}\n// 函式在語法上沒有限定命名原則，但一般會以 set 做為開頭 changePercent -> setPercent\n\n// useState只是一個函式，它會接收一作為初始值的參數並回傳一個包含兩個值的array，第一個值是state、第二個值是用來對剛那個state做setState的函式\n// const [percent, changePercent]=，是利用javascript的解構賦值\n\n/*#endregion 7 */\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,kCAAT,QAAmD,sBAAnD;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,UAAT,CACXC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADW,CAAbeAAe"},"metadata":{},"sourceType":"module"}