{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\source\\\\repos\\\\Learning\\\\React\\\\hello-world\\\\src\\\\App.js\";\nimport logo from './logo.svg';\nimport './App.css'; //import React from 'react'; // <--記得要寫？\n\nimport React, { Component } from 'react'; // extends Component 用\n// function App() {\n//   return (\n// <div className=\"App\">\n//   <header className=\"App-header\">\n//     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//     <p>\n//       Edit <code>src/App.js</code> and save to reload.\n//     </p>\n//     <a\n//       className=\"App-link\"\n//       href=\"https://reactjs.org\"\n//       target=\"_blank\"\n//       rel=\"noopener noreferrer\"\n//     >\n//       Learn React\n//     </a>\n//   </header>\n// </div>\n//   );\n// }\n// 在函式參數中加入props --------\n// 1.\n// function App(props){ \n//   return(\n//        <button>{props.name}</button>\n//   );\n// }\n// 2.\n// function App(props){ \n//   return(\n//     <button onClick={props.handleClick}>{props.name}</button>\n//   );\n// }\n// 3.\n// function App(props){ \n//   return(\n//     <button>{props.children}</button>\n//   );\n// }\n// Function component 為上述\n// class component 為下述\n// 1. 使用render方法\n// class App extends Component{ //繼承Component類別\n//   render(){ // 以render 來 包住 return\n//     return(\n//       <div>\n//         helloWorld\n//       </div>\n//     );\n// }\n// }\n// 2.  傳 props 值\n// class App extends Component{\n//   // constructor(props) { // 加入建構子以及props參數?\n//   //     super(props); \n//   // }\n//   // 雖然教材提到要constructor，但是我封了它，程式才能正常跑？\n//   // A \"useless constructor\" is one that the linter is warning you can safely remove from the code,\n//   // because it doesn't accomplish anything - \n//   // if all you have is a super call (with the same argument the class is created with), \n//   // the constructor doesn't do anything useful, because classes will already call super automatically\n//   // 出處︰https://stackoverflow.com/questions/63609257/what-is-a-useless-constructor-in-react\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n// 3.\n// class App extends Component{\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n// 4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n//    ??但是方法的值，又如傳入呢？使用state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //this.name=\"舊的名字\"; // 加入name? 但這個只能設，不能改\n\n    this.changeName = this.changeName.bind(this); //綁定至自己\n\n    this.state = {\n      name: \"舊的名字\"\n    };\n  }\n\n  changeName(newName) {\n    // 定義changeName\n    //this.name=newName; // 行不通\n    this.setState({\n      name: \"新的名字\"\n    });\n    console.log(\"hey\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.changeName,\n      children: [this.name, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n\n} // 永遠都在的︰(沒有export就沒辨法被import)\n\n\nexport default App;","map":{"version":3,"names":["logo","React","Component","App","constructor","props","changeName","bind","state","name","newName","setState","console","log","render"],"sources":["C:/Users/User/source/repos/Learning/React/hello-world/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n//import React from 'react'; // <--記得要寫？\nimport React,{Component} from 'react'; // extends Component 用\n\n// function App() {\n//   return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n\n//   );\n// }\n\n\n// 在函式參數中加入props --------\n\n// 1.\n\n// function App(props){ \n//   return(\n//        <button>{props.name}</button>\n//   );\n// }\n\n// 2.\n\n// function App(props){ \n//   return(\n//     <button onClick={props.handleClick}>{props.name}</button>\n//   );\n// }\n\n// 3.\n\n// function App(props){ \n//   return(\n//     <button>{props.children}</button>\n//   );\n// }\n\n// Function component 為上述\n// class component 為下述\n\n\n// 1. 使用render方法\n// class App extends Component{ //繼承Component類別\n//   render(){ // 以render 來 包住 return\n//     return(\n//       <div>\n//         helloWorld\n//       </div>\n//     );\n// }\n// }\n\n// 2.  傳 props 值\n\n// class App extends Component{\n  \n//   // constructor(props) { // 加入建構子以及props參數?\n//   //     super(props); \n//   // }\n\n//   // 雖然教材提到要constructor，但是我封了它，程式才能正常跑？\n//   // A \"useless constructor\" is one that the linter is warning you can safely remove from the code,\n//   // because it doesn't accomplish anything - \n//   // if all you have is a super call (with the same argument the class is created with), \n//   // the constructor doesn't do anything useful, because classes will already call super automatically\n//   // 出處︰https://stackoverflow.com/questions/63609257/what-is-a-useless-constructor-in-react\n   \n//   render(){\n\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n\n//   }\n// }\n\n// 3.\n// class App extends Component{\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n\n// 4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n//    ??但是方法的值，又如傳入呢？使用state\nclass App extends Component{\n\n  constructor(props) { \n     super(props);\n     //this.name=\"舊的名字\"; // 加入name? 但這個只能設，不能改\n     this.changeName=this.changeName.bind(this); //綁定至自己\n     this.state=\n     {\n      name:\"舊的名字\"\n     }\n  }\n\n  changeName(newName){ // 定義changeName\n    //this.name=newName; // 行不通\n    this.setState({name:\"新的名字\"})\n    console.log(\"hey\")\n  }\n\n\n   \n  render(){\n    return(\n      <button onClick={this.changeName}>{this.name} </button>\n    );\n  }\n\n}\n  \n\n\n\n\n\n\n// 永遠都在的︰(沒有export就沒辨法被import)\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,KAAP,IAAcC,SAAd,QAA8B,OAA9B,C,CAAuC;AAEvC;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AACA,MAAMC,GAAN,SAAkBD,SAAlB,CAA2B;EAEzBE,WAAW,CAACC,KAAD,EAAQ;IAChB,MAAMA,KAAN,EADgB,CAEhB;;IACA,KAAKC,UAAL,GAAgB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAhB,CAHgB,CAG4B;;IAC5C,KAAKC,KAAL,GACA;MACCC,IAAI,EAAC;IADN,CADA;EAIF;;EAEDH,UAAU,CAACI,OAAD,EAAS;IAAE;IACnB;IACA,KAAKC,QAAL,CAAc;MAACF,IAAI,EAAC;IAAN,CAAd;IACAG,OAAO,CAACC,GAAR,CAAY,KAAZ;EACD;;EAIDC,MAAM,GAAE;IACN,oBACE;MAAQ,OAAO,EAAE,KAAKR,UAAtB;MAAA,WAAmC,KAAKG,IAAxC;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAGD;;AAxBwB,C,CAkC3B;;;AACA,eAAeN,GAAf"},"metadata":{},"sourceType":"module"}