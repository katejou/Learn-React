{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\source\\\\repos\\\\Learning\\\\React\\\\hello-world\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport App from './App'; // Debug 用的\n//import * as serviceWorker from './serviceWorker'; \n// 這個是教材沒寫到的，新(2022?)的指(綁)定 index.html 元素的方法︰\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root')); // 或 createElement ？這個還沒有教到。\n// JSX 語法\n// #region  1. Hello world! 將 DOM 元素，render 進 index.html\n// const element = <h1>Hello world!!!!!</h1>;\n// root.render(element);\n// #endregion 1\n// #region  2. 同上\n// const element = <button>大家好</button>\n// root.render(element);\n// #endregion 2\n// #region  3. 傳入方法 ()=>\n// const element =()=>{\n//   return( <button>大家好</button> );\n// }\n// root.render(element());\n// #endregion 3\n// #region  4. 傳入方法 ()=> 只能 return 一個元素\n// const testFunction =()=> {\n//   return( \n//       <div> \n//           <button> 大家好 </button>\n//           <h1> 我很好 </h1>\n//       </div>\n//   );\n// }\n// // 一定要加 div 將兩個 DOM 包成一個。\n// root.render(testFunction());\n// #endregion\n// #region  5. 在JSX中需要用到javascript的變數/函式...時，就要用{}包起來\n// const showOne = true;\n// root.render(\n//     <h1> { (showOne === true) ? 1 : 0 } </h1>\n// );\n//#endregion 5\n// #region  6. 設定字串 > 字串中，放入字串{}\n// 字串中，放入字串{}\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// root.render(\n//   <h1 style = { styleArgument } > Hello, world! </h1>\n// );\n//  #endregion  6\n// #region  6.5. 反正記得 style = {{}}\n// HTML之中放入字串？\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// const element = <h1 style = { styleArgument } > Hello, world! </h1>;\n// root.render(element);\n// {{}} : 在HTML之中，表示\"\"指定屬性的字串？ X 下方用來指定class的也不是這樣…\n// 外面那層括號代表裡面是javascript語法，裡面的括號表示物件型態 <- 還是看不懂\n// 反正記得 style = {{}}\n// const element = <h1 style = { { fontSize: '100px', color: 'red' } } > Hello, world! </h1>;\n// root.render(element);\n// #endregion 6.5\n// #region  7. 設定 DOM 屬性時 「class」屬性變成「className」\n// const element = <h1 className = \"title\" > Hello, world! </h1>\n// root.render(element);\n// #endregion 7\n// #region  8. 透過JSX結合javascript運算式\n// 例子︰迴圈\n// const multiButton=()=>{\n//   var output=[];\n//   for(let i=0;i<4;++i)\n//       output.push(<button>我是第{i+1}個按鍵</button>)\n//   return output;\n// }\n// root.render(multiButton());\n// #endregion 8\n// #region  9. 屬性給布林值，true的話，可直接省略。(最終都會render成true)\n// 死記 value 是 {}，style 是 {{}} ???\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value={true} > 是 </button>\n//           <br/>\n//           <button value > 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// #endregion 9\n// #region  10. onClick , C要大寫。和value一樣要 = {}\n// onChange 同理，因為JSX都是駝峰字。\n// 方法所收的都是event，event.target就是該呼叫的元素…\n// const getValue=(event)=>{\n//   console.log(event.target.value)\n//   alert(event.target.value);\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={getValue}> 是(value=true) </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// #endregion 10\n// #region  11. 箭頭函式 包入多個 function\n// const myFunction1=(event)=>{ // event可略\n//   console.log(\"F1\");\n//   alert(\"F1\");\n// }\n// const myFunction2=(event)=>{\n//   //alert(event.target.value); // 小心，(e)=> 根本沒有event的傳入\n//   console.log(\"F2\");\n//   alert(\"F2\");\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1();myFunction2()}}> 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// 在瀏覽器的F12看不到元素上依附的onclick方法，但做還是會做…\n// React這樣做，比較沒有那麼容易給「使用者」看穿﹑亂改﹑找漏洞?\n// 還比較好去編輯？(我想是優點吧。)\n// 箭頭函式 : 想傳什麼參數、使用幾個函式、做什麼運算都可以。缺點是很容易讓版面看起來很亂。\n// #endregion  11\n// #region  11.5  另一個傳入值，而不是傳入 event 的方法\n// const myFunction1=(val)=>{\n//   console.log(val);\n//   alert(val);\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1(e.target.value);}}> 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// 在JSX綁定js資料、函式時，一定要加上{}\n// 剛開始很容易照以前的習慣直接用屬性=\"綁上去的東西\"\n// 這樣的話等同於在傳字串。\n// #endregion 11.5\n// #region React Component (自訂元素) 簡介\n// 這個語法讓我們可以把程式碼以函式(或是class，後面會提到)包成模組，\n// 變成一個自己訂作的元素，\n// 然後用跟使用button、div這些元素一樣的語法在JSX中使用\n// 元素名稱第一個字母必須要是大寫、和函式(或class)名稱相同\n// #endregion\n// #region  1. (Funtion Component)簡單例子\n// function App(){\n//   return(\n//     <button>大家好</button>\n//   );\n// }\n// root.render( <div> <App/> </div> );\n// #endregion 1\n// #region  2. 於 render 可重覆使用\n// function Progress(){\n//   const barWidth=\"50%\";\n//   return(\n//       <div>\n//           <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//           <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:barWidth,height:\"100%\",borderRadius:\"10px\"}}></div>\n//       </div>\n//     </div>\n//   );\n// }\n// root.render(\n//       <Progress/>\n//       <Progress/>\n// );\n// #endregion 2.\n// #region  3. 從鄰檔引用自訂元素\n// 上方要︰import App from './App';\n// 意思是指將隔壁 App.js 的 App 方法引用進來。供下方使用\n//root.render(<App/>);\n// #endregion 3\n// props = 自訂元素 中的 自訂Attribute\n// 「也」要去改 App.js 這個檔案\n// #region  1. 主檔(index.js)和附檔(App.js)之間的傳值 \n// root.render(<div><App name='大家好'/></div>);\n// #endregion 1\n// #region  傳接資料的型別問題\n// 文字''/\"\"\n//root.render(<div><App number=\"87\" getData=\"true\"/></div>);\n// 其他型別 {}\n//root.render(<div><App number={87} getData={true}/></div>);\n// 使用變數? props是唯讀\n// 他說︰有的時候我們就是想要在元件自己這更改props，這個時候就要用比較迂迴的做法。在後面講...\n// #endregion\n// #region  2. 將onClick會做的事，傳到寫好的自訂元件\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div> \n// );\n// #endregion\n// #region  3. 在react component中，我們把包在標籤中間的東西，稱為children。\n// <元素名稱> (其他的東西) </元素名稱>\n//  (其他的東西) = children\n// root.render(<div><App> children </App></div>);\n// 不同的children間能互相影響，和一個叫state的東東有關係，但作者還是說之後再……\n// #endregion\n// ------------------\n// component = 自訂元素\n// Function component 為上述 (直接在這個檔)\n// class component 為下述 (從外檔引入)\n// ------------------\n// #region   1. 使用render方法\n//root.render(<App/>);\n// #endregion 1\n// #region   2. 傳 props 值\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n//#endregion 2\n// #region   3. 會跑，但是不會有改變，只會看到 log 中的 hey\n// const changeName=(newName)=>{ \n//   name=newName;\n//   console.log(\"hey\")//加入此行\n// }\n// var name=\"舊的名字\";\n// root.render(\n//     <div>\n//         <App name={name} handleClick={changeName}/> \n//         {/* 就算是 changeName(\"新的名字\") 也傳不入參數，程式會死，連log都不寫 */}\n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n// #endregion 3\n// #region   4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n// 詳見 App.js\n// root.render(\n//     <div>\n//         <App/> \n//     </div>\n// );\n//  #endregion 4\n// #region   5. 多一個進度條的練習\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n//#endregion 5\n// #region   6. state 的特性\n// 詳見App.js\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n//#endregion  6\n// ( 回到 function component )  \n// #region   1. useState   \n// React hook出現了，\n// 它提供一系列讓你能在function component中使用「在class component常用的功能」的方法，\n// useState就是其中之一。\n// const [percent, changePercent] = useState(\"20%\");\n// 我們宣告了一個變數和一個函式，第一個percent是變數\n// 而第二個 changePercent 變成了等同於 (值)=>{this.setState({percent:值})}\n// 函式在語法上沒有限定命名原則，但一般會以 set 做為開頭 ( changePercent 該為 setPercent )\n// const [percent, changePercent] = ....，是利用javascript的解構賦值\n// useState只是一個函式，它會接收一作為初始值的參數 並回傳一個包含兩個值的array，\n// 回傳︰第一個值是 state 、 第二個值是用來對剛那個 state 做 setState 的函式\n// 實作詳見︰ App.js\n//root.render(<div><br/><br/><App/></div>);\n// #endregion 1 \n// #region useState(和其他的React hook) 的特質\n// 不能在function component中的迴圈、if-else、nest function\n// (在function scope中宣告的function)被定義使用\n// 對useState而言，它是依照(render的)順序去分辨每一個hook，\n// 而不是用我們的定義內容/來接的變數的名字去分辨\n// 所以 re-render 的時候…如果有迴圈什麼的，就會全亂了。\n//  總結︰ function component 的 useState 是比較簡潔\n//          但功能是真的不多，和 class component 對比。\n// #endregion\n// #region   2. debug : React-Developer-Tools\n// 當專案規模到一定程度的時候，\n// state、props和函式會變的很多，debug上越來越困難。\n// 這時我們就會用到一款在chrome上協助開發者debug的插件:React-Developer-Tools。\n// 引入︰import * as serviceWorker from './serviceWorker'；\n// root.render\n// (    \n// <div>\n//   <br/>\n//   <br/>\n//   <App name=\"我是進度條\">在index.js中轉換百分比</App>\n// </div>\n// );\n// 在 chrome 線上應用程式商店，安裝 React-Developer-Tools\n// 可以在 More 之中，看出有什麼 Component ，還可以自由輸入 attribute 的值，即時看到效果。\n// 眼睛可以顯示位置\n// 當你在component點擊該元件後，回到console，輸入$r，就會跳出和此元件相關屬性，讓你可以選擇並搭配console做一些監控、模擬事件等等常見的debug方式。\n// #endregion\n// #region 使用 Http request - Fetch Api\n// 因為jQuery運作模式/渲染DOM的方式和React不太一樣，\n// 為避免發生衝突，一般「不會希望」在React中使用jQuery\n// Fetch Api是內建於JavaScript web api的一部份。使用時，不需要額外下載或嵌入CDN。\n// Fetch是一個Promise\n//    #region 基本架構︰\n// fetch( request的url, { /*設定request內容*/})\n//     .then(res => res.json()) /*把request json化*/\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n//    #endregion \n//    #region 使用GET︰\n// fetch( request的url, {method: \"GET\"}) /*設定使用GET*/\n//     .then(res => res.json()) \n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n//    #endregion\n//    #region 加上headers (Content Type)\n// fetch( request的url, {  method: \"GET\", headers: new Headers({ 'Content-Type': 'application/json',})   }\n// )\n// .then(res => res.json())\n// .then(data => {\n//     /*接到request data後要做的事情*/\n// })\n// .catch(e => {\n//   /*發生錯誤時要做的事情*/\n// })\n//    #endregion\n//    #region 加上headers (token)\n// const token = \"Bearer \"+ 我存好的token ;\n// fetch( request的url, {\n//         method: \"GET\",\n//         headers: new Headers({\n//             'Content-Type': 'application/json',\n//             'Authorization': token, /* 把token放在這 */\n//         })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n// )\n//    #endregion \n//    #region 加上body (JSON type)\n// const data= { A:\"資料A\", B:\"資料B\" }\n// fetch( request的url, {\n//         method: \"GET\",\n//         body: JSON.stringify(data),   /*<<<<<把json資料字串化*/\n//         headers: new Headers({\n//             'Content-Type': 'application/json'\n//         })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n//    #endregion\n//    #region 加上body (x-www-form-urlencoded type) 沒有用過…？\n// 資料處理\n// const data= { A:\"資料A\", B:\"資料B\" };\n// const formData = Object.keys(data).map(\n//     function (keyName) {\n//         return encodeURIComponent(keyName) + '=' + encodeURIComponent(data[keyName])\n//     }\n// ).join('&');\n// 使用\n// fetch( request的url, {\n//   method: \"GET\",\n//   body: formData,   /* <<<<< 使用處理後的資料*/\n//   headers: new Headers({\n//       \"Content-type\": \"application/x-www-form-urlencoded\"\n//   })\n// })\n// .then(res => res.json())\n// .then(data => {\n//     /*接到request data後要做的事情*/\n// })\n// .catch(e => {\n//   /*發生錯誤時要做的事情*/\n// })\n//    #endregion \n// #endregion Fetch 理論\n// #region   1. 實作 Fetch\n// 詳見 App.js\n//root.render(<App/>)\n// #endregion 1\n// #region   生命週期\n//元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)\n//元件被安裝時(Mount) :\n//constructor() -> componentWillMount() -> render() -> 渲染DOM ->......(渲染後的生命週期)\n// version 17後，componentWillMount()將會被改為UNSAFE_componentWillMount()\n// 我自己CMD :　npm view react version  結果︰ 18.2.0 ，以Ver.16.3誕生的新週期函數static getDerivedStateFromProps()來代替。\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> ......(渲染後的生命週期)\n// 中間的這一步長這樣︰\n// static getDerivedStateFromProps(props,state){\n//   if(props.dad!==\"Chang\")\n//     return {isRightDad:false}\n// }\n// 這個函數最常使用的狀況是「用初始接收到的props」\n// 去設定第一次render時的state或是做其他的事情。\n// 這個函數是static，也就是this不能在這裡使用\n//(static指的是這函式不屬於以這個class被宣告出來的(單一個)物件，而是泛屬於此class類別的所有物件)。\n// 所以我們不能在getDerivedStateFromProps呼叫 「this」.setState !!! \n// 更改state的方法是用預寫好的規則 : 以這個函式的return值來設定\n// #endregion 1\n// #region   1. 生命週期實作 getDerivedStateFromProps\n// 詳見 App.js\n//root.render(<App dad=\"Chang\"/>);\n// #endregion 1\n// #region   補上，承下\n// 要注意的是，我們不希望在getDerivedStateFromProps()中做宣告/初始化的動作，\n// 如果可以的話就在constructor中做，\n// 其他如fetch或是動畫等，應該移到下一篇要講的componentDidMount()中來做。\n// #endregion  \n// #region   componentWillMount -> componentDidMount\n// componentWillMount(){\n//   if(this.props.dad!==\"Chang\")\n//     this.setState({isRightDad:false})\n// }\n//過去除了getDerivedStateFromProps()的功能外，\n//很多人會在這裡執行fetch以取得想在render()中使用的資料。<<<---這個是生命週期的重點。\n//例如token的檢查等等。(?)\n//然而官方表示，\n//如果在componentWillMount()這執行fetch，並不會等response進來才執行render。\n//又因為這是唯一會在 *server side (見註解)執行的生命週期函數，\n//導致它在server side和client side都會執行一次，\n//「重複執行」這件事並不符合我們對Mount週期函數的期待。\n// (所以它是在 server side 回應 request 時，已經會執行一次。去到了client side 又再做一次？)\n// ===> version 17後，componentWillMount()將會被改為UNSAFE_componentWillMount()。\n//一般我們對Mount系列函數的期待是「只執行一次」，不想重複執行的動作都會在這系列呼叫。\n// 所以我們改用 componentDidMount\n// 生命週期︰\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> componentDidMount()\n// #endregion \n// #region   2. 生命週期實作 componentDidMount\n// 詳見 App.js\n//root.render(<App dad=\"Chang\"/>);\n// #endregion   2\n// #region   3. fetch loading (在 fetch 拿到資料之前，不想元素的「空白」狀態被看見)\n// 以一個 state 來控制 「顯示」的狀態，如果沒有fetch到資料時，就掛個「Loading...」的牌\n// 詳見 App.js\n\nroot.render( /*#__PURE__*/_jsxDEV(App, {\n  dad: \"Chang\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 672,\n  columnNumber: 13\n}, this)); // #endregion 3\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","scryRenderedDOMComponentsWithClass","reportWebVitals","App","root","createRoot","document","getElementById","render"],"sources":["C:/Users/User/source/repos/Learning/React/hello-world/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\nimport App from './App';\n\n// Debug 用的\n//import * as serviceWorker from './serviceWorker'; \n\n// 這個是教材沒寫到的，新(2022?)的指(綁)定 index.html 元素的方法︰\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\n// 或 createElement ？這個還沒有教到。\n\n\n// JSX 語法\n\n// #region  1. Hello world! 將 DOM 元素，render 進 index.html\n\n// const element = <h1>Hello world!!!!!</h1>;\n// root.render(element);\n\n// #endregion 1\n\n// #region  2. 同上\n\n// const element = <button>大家好</button>\n// root.render(element);\n\n// #endregion 2\n\n// #region  3. 傳入方法 ()=>\n\n// const element =()=>{\n//   return( <button>大家好</button> );\n// }\n// root.render(element());\n\n// #endregion 3\n\n// #region  4. 傳入方法 ()=> 只能 return 一個元素\n\n// const testFunction =()=> {\n//   return( \n//       <div> \n//           <button> 大家好 </button>\n//           <h1> 我很好 </h1>\n//       </div>\n//   );\n// }\n// // 一定要加 div 將兩個 DOM 包成一個。\n// root.render(testFunction());\n\n// #endregion\n\n// #region  5. 在JSX中需要用到javascript的變數/函式...時，就要用{}包起來\n\n// const showOne = true;\n// root.render(\n//     <h1> { (showOne === true) ? 1 : 0 } </h1>\n// );\n\n//#endregion 5\n\n// #region  6. 設定字串 > 字串中，放入字串{}\n\n// 字串中，放入字串{}\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// root.render(\n//   <h1 style = { styleArgument } > Hello, world! </h1>\n// );\n\n//  #endregion  6\n\n// #region  6.5. 反正記得 style = {{}}\n\n// HTML之中放入字串？\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// const element = <h1 style = { styleArgument } > Hello, world! </h1>;\n// root.render(element);\n\n// {{}} : 在HTML之中，表示\"\"指定屬性的字串？ X 下方用來指定class的也不是這樣…\n// 外面那層括號代表裡面是javascript語法，裡面的括號表示物件型態 <- 還是看不懂\n// 反正記得 style = {{}}\n// const element = <h1 style = { { fontSize: '100px', color: 'red' } } > Hello, world! </h1>;\n// root.render(element);\n\n// #endregion 6.5\n\n// #region  7. 設定 DOM 屬性時 「class」屬性變成「className」\n\n// const element = <h1 className = \"title\" > Hello, world! </h1>\n// root.render(element);\n\n// #endregion 7\n\n// #region  8. 透過JSX結合javascript運算式\n\n// 例子︰迴圈\n\n// const multiButton=()=>{\n//   var output=[];\n\n//   for(let i=0;i<4;++i)\n//       output.push(<button>我是第{i+1}個按鍵</button>)\n\n//   return output;\n// }\n\n// root.render(multiButton());\n\n// #endregion 8\n\n// #region  9. 屬性給布林值，true的話，可直接省略。(最終都會render成true)\n\n// 死記 value 是 {}，style 是 {{}} ???\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value={true} > 是 </button>\n//           <br/>\n//           <button value > 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n\n// #endregion 9\n\n// #region  10. onClick , C要大寫。和value一樣要 = {}\n\n// onChange 同理，因為JSX都是駝峰字。\n// 方法所收的都是event，event.target就是該呼叫的元素…\n\n// const getValue=(event)=>{\n//   console.log(event.target.value)\n//   alert(event.target.value);\n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={getValue}> 是(value=true) </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// #endregion 10\n\n// #region  11. 箭頭函式 包入多個 function\n\n// const myFunction1=(event)=>{ // event可略\n//   console.log(\"F1\");\n//   alert(\"F1\");\n// }\n\n// const myFunction2=(event)=>{\n//   //alert(event.target.value); // 小心，(e)=> 根本沒有event的傳入\n//   console.log(\"F2\");\n//   alert(\"F2\");\n  \n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1();myFunction2()}}> 是 </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// 在瀏覽器的F12看不到元素上依附的onclick方法，但做還是會做…\n// React這樣做，比較沒有那麼容易給「使用者」看穿﹑亂改﹑找漏洞?\n// 還比較好去編輯？(我想是優點吧。)\n\n// 箭頭函式 : 想傳什麼參數、使用幾個函式、做什麼運算都可以。缺點是很容易讓版面看起來很亂。\n\n// #endregion  11\n\n// #region  11.5  另一個傳入值，而不是傳入 event 的方法\n\n// const myFunction1=(val)=>{\n//   console.log(val);\n//   alert(val);\n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1(e.target.value);}}> 是 </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// 在JSX綁定js資料、函式時，一定要加上{}\n// 剛開始很容易照以前的習慣直接用屬性=\"綁上去的東西\"\n// 這樣的話等同於在傳字串。\n\n// #endregion 11.5\n\n// #region React Component (自訂元素) 簡介\n\n// 這個語法讓我們可以把程式碼以函式(或是class，後面會提到)包成模組，\n// 變成一個自己訂作的元素，\n// 然後用跟使用button、div這些元素一樣的語法在JSX中使用\n\n// 元素名稱第一個字母必須要是大寫、和函式(或class)名稱相同\n\n// #endregion\n\n// #region  1. (Funtion Component)簡單例子\n\n// function App(){\n//   return(\n//     <button>大家好</button>\n//   );\n// }\n\n// root.render( <div> <App/> </div> );\n\n// #endregion 1\n\n// #region  2. 於 render 可重覆使用\n\n// function Progress(){\n//   const barWidth=\"50%\";\n//   return(\n//       <div>\n//           <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//           <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:barWidth,height:\"100%\",borderRadius:\"10px\"}}></div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// root.render(\n//       <Progress/>\n//       <Progress/>\n// );\n\n// #endregion 2.\n\n// #region  3. 從鄰檔引用自訂元素\n\n// 上方要︰import App from './App';\n// 意思是指將隔壁 App.js 的 App 方法引用進來。供下方使用\n//root.render(<App/>);\n\n// #endregion 3\n\n// props = 自訂元素 中的 自訂Attribute\n// 「也」要去改 App.js 這個檔案\n\n// #region  1. 主檔(index.js)和附檔(App.js)之間的傳值 \n\n// root.render(<div><App name='大家好'/></div>);\n\n// #endregion 1\n\n// #region  傳接資料的型別問題\n// 文字''/\"\"\n//root.render(<div><App number=\"87\" getData=\"true\"/></div>);\n// 其他型別 {}\n//root.render(<div><App number={87} getData={true}/></div>);\n\n// 使用變數? props是唯讀\n// 他說︰有的時候我們就是想要在元件自己這更改props，這個時候就要用比較迂迴的做法。在後面講...\n\n// #endregion\n\n// #region  2. 將onClick會做的事，傳到寫好的自訂元件\n\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div> \n// );\n\n// #endregion\n\n// #region  3. 在react component中，我們把包在標籤中間的東西，稱為children。\n\n// <元素名稱> (其他的東西) </元素名稱>\n//  (其他的東西) = children\n\n// root.render(<div><App> children </App></div>);\n\n// 不同的children間能互相影響，和一個叫state的東東有關係，但作者還是說之後再……\n\n// #endregion\n\n// ------------------\n// component = 自訂元素\n// Function component 為上述 (直接在這個檔)\n// class component 為下述 (從外檔引入)\n// ------------------\n\n// #region   1. 使用render方法\n\n//root.render(<App/>);\n\n// #endregion 1\n\n// #region   2. 傳 props 值\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n\n//#endregion 2\n\n// #region   3. 會跑，但是不會有改變，只會看到 log 中的 hey\n\n// const changeName=(newName)=>{ \n//   name=newName;\n//   console.log(\"hey\")//加入此行\n// }\n\n// var name=\"舊的名字\";\n\n// root.render(\n//     <div>\n//         <App name={name} handleClick={changeName}/> \n//         {/* 就算是 changeName(\"新的名字\") 也傳不入參數，程式會死，連log都不寫 */}\n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n\n// #endregion 3\n\n// #region   4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n\n// 詳見 App.js\n// root.render(\n//     <div>\n//         <App/> \n//     </div>\n// );\n\n//  #endregion 4\n\n// #region   5. 多一個進度條的練習\n\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n\n//#endregion 5\n\n// #region   6. state 的特性\n\n// 詳見App.js\n\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n\n//#endregion  6\n\n// ( 回到 function component )  \n\n// #region   1. useState   \n\n// React hook出現了，\n// 它提供一系列讓你能在function component中使用「在class component常用的功能」的方法，\n// useState就是其中之一。\n\n// const [percent, changePercent] = useState(\"20%\");\n\n// 我們宣告了一個變數和一個函式，第一個percent是變數\n// 而第二個 changePercent 變成了等同於 (值)=>{this.setState({percent:值})}\n// 函式在語法上沒有限定命名原則，但一般會以 set 做為開頭 ( changePercent 該為 setPercent )\n\n// const [percent, changePercent] = ....，是利用javascript的解構賦值\n// useState只是一個函式，它會接收一作為初始值的參數 並回傳一個包含兩個值的array，\n// 回傳︰第一個值是 state 、 第二個值是用來對剛那個 state 做 setState 的函式\n\n// 實作詳見︰ App.js\n\n//root.render(<div><br/><br/><App/></div>);\n\n// #endregion 1 \n\n// #region useState(和其他的React hook) 的特質\n\n// 不能在function component中的迴圈、if-else、nest function\n// (在function scope中宣告的function)被定義使用\n\n// 對useState而言，它是依照(render的)順序去分辨每一個hook，\n// 而不是用我們的定義內容/來接的變數的名字去分辨\n\n// 所以 re-render 的時候…如果有迴圈什麼的，就會全亂了。\n\n//  總結︰ function component 的 useState 是比較簡潔\n//          但功能是真的不多，和 class component 對比。\n\n// #endregion\n\n// #region   2. debug : React-Developer-Tools\n\n// 當專案規模到一定程度的時候，\n// state、props和函式會變的很多，debug上越來越困難。\n// 這時我們就會用到一款在chrome上協助開發者debug的插件:React-Developer-Tools。\n\n// 引入︰import * as serviceWorker from './serviceWorker'；\n\n// root.render\n// (    \n// <div>\n//   <br/>\n//   <br/>\n//   <App name=\"我是進度條\">在index.js中轉換百分比</App>\n// </div>\n// );\n\n// 在 chrome 線上應用程式商店，安裝 React-Developer-Tools\n// 可以在 More 之中，看出有什麼 Component ，還可以自由輸入 attribute 的值，即時看到效果。\n// 眼睛可以顯示位置\n// 當你在component點擊該元件後，回到console，輸入$r，就會跳出和此元件相關屬性，讓你可以選擇並搭配console做一些監控、模擬事件等等常見的debug方式。\n\n// #endregion\n\n// #region 使用 Http request - Fetch Api\n\n// 因為jQuery運作模式/渲染DOM的方式和React不太一樣，\n// 為避免發生衝突，一般「不會希望」在React中使用jQuery\n\n// Fetch Api是內建於JavaScript web api的一部份。使用時，不需要額外下載或嵌入CDN。\n// Fetch是一個Promise\n\n//    #region 基本架構︰\n\n// fetch( request的url, { /*設定request內容*/})\n//     .then(res => res.json()) /*把request json化*/\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n\n//    #endregion \n\n//    #region 使用GET︰\n\n// fetch( request的url, {method: \"GET\"}) /*設定使用GET*/\n//     .then(res => res.json()) \n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n\n//    #endregion\n\n//    #region 加上headers (Content Type)\n\n// fetch( request的url, {  method: \"GET\", headers: new Headers({ 'Content-Type': 'application/json',})   }\n// )\n// .then(res => res.json())\n// .then(data => {\n//     /*接到request data後要做的事情*/\n// })\n// .catch(e => {\n//   /*發生錯誤時要做的事情*/\n// })\n\n//    #endregion\n\n//    #region 加上headers (token)\n\n// const token = \"Bearer \"+ 我存好的token ;\n\n// fetch( request的url, {\n//         method: \"GET\",\n//         headers: new Headers({\n//             'Content-Type': 'application/json',\n//             'Authorization': token, /* 把token放在這 */\n//         })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n// )\n\n//    #endregion \n\n//    #region 加上body (JSON type)\n\n// const data= { A:\"資料A\", B:\"資料B\" }\n\n// fetch( request的url, {\n//         method: \"GET\",\n//         body: JSON.stringify(data),   /*<<<<<把json資料字串化*/\n//         headers: new Headers({\n//             'Content-Type': 'application/json'\n//         })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n\n//    #endregion\n\n//    #region 加上body (x-www-form-urlencoded type) 沒有用過…？\n\n// 資料處理\n// const data= { A:\"資料A\", B:\"資料B\" };\n// const formData = Object.keys(data).map(\n//     function (keyName) {\n//         return encodeURIComponent(keyName) + '=' + encodeURIComponent(data[keyName])\n//     }\n// ).join('&');\n\n// 使用\n// fetch( request的url, {\n//   method: \"GET\",\n//   body: formData,   /* <<<<< 使用處理後的資料*/\n//   headers: new Headers({\n//       \"Content-type\": \"application/x-www-form-urlencoded\"\n//   })\n// })\n// .then(res => res.json())\n// .then(data => {\n//     /*接到request data後要做的事情*/\n// })\n// .catch(e => {\n//   /*發生錯誤時要做的事情*/\n// })\n\n//    #endregion \n\n// #endregion Fetch 理論\n\n// #region   1. 實作 Fetch\n\n// 詳見 App.js\n\n//root.render(<App/>)\n\n// #endregion 1\n\n// #region   生命週期\n\n//元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)\n\n//元件被安裝時(Mount) :\n//constructor() -> componentWillMount() -> render() -> 渲染DOM ->......(渲染後的生命週期)\n\n// version 17後，componentWillMount()將會被改為UNSAFE_componentWillMount()\n// 我自己CMD :　npm view react version  結果︰ 18.2.0 ，以Ver.16.3誕生的新週期函數static getDerivedStateFromProps()來代替。\n\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> ......(渲染後的生命週期)\n\n// 中間的這一步長這樣︰\n// static getDerivedStateFromProps(props,state){\n//   if(props.dad!==\"Chang\")\n//     return {isRightDad:false}\n// }\n\n// 這個函數最常使用的狀況是「用初始接收到的props」\n// 去設定第一次render時的state或是做其他的事情。\n\n// 這個函數是static，也就是this不能在這裡使用\n//(static指的是這函式不屬於以這個class被宣告出來的(單一個)物件，而是泛屬於此class類別的所有物件)。\n\n// 所以我們不能在getDerivedStateFromProps呼叫 「this」.setState !!! \n// 更改state的方法是用預寫好的規則 : 以這個函式的return值來設定\n\n\n\n// #endregion 1\n\n// #region   1. 生命週期實作 getDerivedStateFromProps\n\n// 詳見 App.js\n\n//root.render(<App dad=\"Chang\"/>);\n\n// #endregion 1\n\n// #region   補上，承下\n\n// 要注意的是，我們不希望在getDerivedStateFromProps()中做宣告/初始化的動作，\n// 如果可以的話就在constructor中做，\n\n// 其他如fetch或是動畫等，應該移到下一篇要講的componentDidMount()中來做。\n\n// #endregion  \n\n// #region   componentWillMount -> componentDidMount\n\n// componentWillMount(){\n//   if(this.props.dad!==\"Chang\")\n//     this.setState({isRightDad:false})\n// }\n\n//過去除了getDerivedStateFromProps()的功能外，\n//很多人會在這裡執行fetch以取得想在render()中使用的資料。<<<---這個是生命週期的重點。\n//例如token的檢查等等。(?)\n//然而官方表示，\n//如果在componentWillMount()這執行fetch，並不會等response進來才執行render。\n//又因為這是唯一會在 *server side (見註解)執行的生命週期函數，\n//導致它在server side和client side都會執行一次，\n\n//「重複執行」這件事並不符合我們對Mount週期函數的期待。\n// (所以它是在 server side 回應 request 時，已經會執行一次。去到了client side 又再做一次？)\n// ===> version 17後，componentWillMount()將會被改為UNSAFE_componentWillMount()。\n\n//一般我們對Mount系列函數的期待是「只執行一次」，不想重複執行的動作都會在這系列呼叫。\n// 所以我們改用 componentDidMount\n\n// 生命週期︰\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> componentDidMount()\n\n// #endregion \n\n// #region   2. 生命週期實作 componentDidMount\n\n// 詳見 App.js\n//root.render(<App dad=\"Chang\"/>);\n\n// #endregion   2\n\n// #region   3. fetch loading (在 fetch 拿到資料之前，不想元素的「空白」狀態被看見)\n\n// 以一個 state 來控制 「顯示」的狀態，如果沒有fetch到資料時，就掛個「Loading...」的牌\n\n// 詳見 App.js\nroot.render(<App dad=\"Chang\"/>);\n\n// #endregion 3\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,SAASC,kCAAT,QAAmD,sBAAnD;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;AACA;AAEA;;;AACA,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,UAAT,CACXC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADW,CAAbeAAY,QAAC,GAAD;EAAK,GAAG,EAAC;AAAT;EAAA;EAAA;EAAA;AAAA,QAAZ,E,CAEA;AAEA;AACA;AACA;;AAEAN,eAAe"},"metadata":{},"sourceType":"module"}