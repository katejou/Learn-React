{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\source\\\\repos\\\\Learning\\\\React\\\\hello-world\\\\src\\\\App.js\";\nimport logo from './logo.svg';\nimport './App.css'; //import React from 'react'; // <--記得要寫？\n\nimport React, { Component } from 'react'; // 用作 Class Component ， 也為了展示 Debug\n//import React, { useState } from 'react'; // 為了 useState ( Function Component )\n// #region 檔案原生的\n// function App() {\n//   return (\n// <div className=\"App\">\n//   <header className=\"App-header\">\n//     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//     <p>\n//       Edit <code>src/App.js</code> and save to reload.\n//     </p>\n//     <a\n//       className=\"App-link\"\n//       href=\"https://reactjs.org\"\n//       target=\"_blank\"\n//       rel=\"noopener noreferrer\"\n//     >\n//       Learn React\n//     </a>\n//   </header>\n// </div>\n//   );\n// }\n// #endregion\n// props = 自訂元素 中的 自訂Attribute \n// #region 1. 傳文字\n// function App(props){ \n//   return(\n//        <button>{props.name}</button>\n//   );\n// }\n// #endregion 1\n// #region 2. 傳文字和方法\n// function App(props){ \n//   return(\n//     <button onClick={props.handleClick}>{props.name}</button>\n//   );\n// }\n// #endregion\n// #region 3. 傳children\n// function App(props){ \n//   return(\n//     <button>{props.children}</button>\n//   );\n// }\n// #endregion\n//---------------------------\n// Function component 為上述\n// class component 為下述 (extends Component) 上方的引用也要改成︰import React,{Component} from 'react';\n//---------------------------\n// #region 1. extends Component 和 使用render方法\n// class App extends Component{ //繼承Component類別\n//   render(){ // 以render 來 包住 return\n//     return(\n//       <div>\n//         helloWorld\n//       </div>\n//     );\n//   }\n// }\n// #endregion 1\n// #region 2. 傳 props 值\n// class App extends Component{\n//   // constructor(props) { // 加入建構子以及props參數?\n//   //     super(props); \n//   // }\n//   // 雖然教材提到要constructor，但是我封了它，程式才能正常跑？ Warning 如下︰\n//   // A \"useless constructor\" is one that the linter is warning you can safely remove from the code,\n//   // because it doesn't accomplish anything - \n//   // if all you have is a super call (with the same argument the class is created with), \n//   // the constructor doesn't do anything useful, because classes will already call super automatically\n//   // 出處︰https://stackoverflow.com/questions/63609257/what-is-a-useless-constructor-in-react\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n// #endregion 2\n// #region 3. 對應 index.js 的 3，作失敗的例子。\n// class App extends Component{\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n// #endregion\n// #region 4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n//      ??但是方法的值，又如傳入呢？使用state:\n// class App extends Component{\n//   constructor(props) { \n//      super(props);\n//      //this.name=\"舊的名字\"; // 加入name? 但這個只能設，不能改\n//      // 下面的加起來才能改 : \n//      this.changeName=this.changeName.bind(this); //方法要綁定自己的方法 <-- 我就當是宣告的一部份好了，雖然有點冗餘。\n//      this.state=\n//      {\n//       name:\"舊的名字\"\n//      }\n//   }\n// 定義changeName\n//   changeName(newName){       \n//     //this.name=newName;     // 行不通\n//     //console.log(\"hey\")     // <- 證明只會被跳過\n//     this.setState({name:\"新的名字\"})\n//   }\n//   render(){\n//     return(\n//       <button onClick={this.changeName}>{this.state.name} </button>\n//     );\n//   }\n// }\n// #endregion 4\n// #region 5. 承上的多一個練習 (比較清淅)\n// class App extends Component{\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//       percent:\"30%\"\n//     }\n//     this.changePercent=this.changePercent.bind(this); //綁定changePercent\n//   }\n//   changePercent(){ //加入changePercent函式\n//     if(this.state.percent === \"30%\")\n//       this.setState({percent:\"70%\"})\n//     else\n//       this.setState({percent:\"30%\"})\n//   }\n//     render(){\n//         return(\n//           <div>\n//             <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//               <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//             </div>\n//             <button onClick={this.changePercent}>30% <code>-</code>70% </button>\n//           </div>\n//         );\n//     }\n// }\n// #endregion 5\n// #region 6. state 的特性 (沒有對應去跑看看的例子，只是用來看看)\n// class App extends Component{\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//       percent: 20,\n//       mounted: false, // 存在但沒有被寫到的state 不會被移除\n//       // 除非用setState移除state\n//       // 對於state中的多屬性的物件，不能只修改單一屬性\n//       styleData:{\n//         width: \"30%\",\n//         height: \"50%\"\n//       }     \n//     }\n//     this.changePercent=this.changePercent.bind(this); //綁定changePercent\n//   }\n//   changePercent(){ \n//     this.setState({percent:\"70%\",counter:0});\n//     // counter 會自動建立為一個 state 的值\n//     // 如果在 constructor 連 state 的宣告都沒寫，就會自動建立 state。\n//     // 對於state中的有多個屬性的物件，不能只修改單一屬性\n//     //  this.setState({ styleData:{width:\"70%\"} });\n//     // 這個把 height: \"50%\" 這個 styleData 抹去。\n//     // 如果想要只更改state內的物件的單一屬性並保留其他屬性，可以這樣寫:\n//     // this.setState({ \n//     //   styleData:{\n//     //       width: \"70%\",\n//     //       height: this.state.styleData.height\n//     //   } \n//     // });\n//     //setState通常需要花一點細微的時間，雖然不會察覺，但是由於這點加上js的非同步特性，\n//     //在setState後面用到state的函式「常常會拿到改變前的state值」????\n//     // 這個時候可以搭配setState預設的第二個參數。:\n//     // setState的第二個參數可有可無，它是個function，當state被設定完之後，就會執行\n//     // this.setState(\n//     //   {percent: 70}, // 第一個參數是設定的動作\n//     //   ()=>{console.log(this.state.percent);} // 第二個參數是一個會執行的動作\n//     // ) \n//     // 這樣會改了值之後，再印出70來。<-- 作用是來確定這件事情已經做完，不會拿到之前的值嗎？\n//   }\n//   deleteState()\n//   {\n//     this.setState({mounted: undefined});\n//   }\n//   createState()\n//   {\n//     let counter=5;\n//     this.setState({counter});\n//     /* 如果目前的state有counter,把它指定為5。如果沒有，則創造一個叫counter的state */\n//   }\n//     render(){\n//         return(\n//           <div>\n//             <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//               <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//             </div>\n//             <button onClick={this.changePercent}>30% <code>-</code>70% </button>\n//           </div>\n//         );\n//     }\n// }\n// #endregion 6\n//---------------------------\n// Function component 使用 useState\n//---------------------------\n// #region 1. useState  \n// import React, { useState } from 'react'; 上方 import\n// 注意︰width:percent 和 onClick={()=>{changePercent(\"70%\")}} \n// const App=()=>{\n//     const [percent, changePercent] = useState(\"30%\");//<- 設值兼定義方法\n//     return( //  不用 render 方法\n//       <div>\n//         <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//           <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//         </div>\n//         <button onClick={()=>{changePercent(\"70%\")}}>轉換百分比 </button>\n//       </div>\n//     );\n// }\n// #endregion 1\n// #region 2. 展示 Debug\n// class App extends Component{\n//     constructor(props) {\n//       super(props);\n//       this.state={\n//         percent:\"30%\"\n//       }\n//       this.name=\"舊的名字\"; // 這並不是this.props.name 要小心搞混了。\n//       this.changePercent = this.changePercent.bind(this);\n//     }\n//     changePercent(){\n//       this.setState({percent:(this.state.percent===\"70%\")?\"30%\":\"70%\"}); // 在setState之中 給簡單的方法 來回傳值\n//       console.log(\"hey\");\n//     }\n//     render(){\n//         return(\n//         <div>\n//               <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//                 <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//               </div>\n//               <button onClick={this.changePercent}> {this.props.children} </button>\n//               {this.props.name}\n//         </div>\n//         );\n//     }\n// }\n// #endregion 2\n// #region 1. fetch\n// class App extends Component {\n//     constructor(props) {\n//       super(props);\n//       this.state={\n//         repoName: null\n//       }\n//       this.handleClick=this.handleClick.bind(this);\n//     }\n//     handleClick(){\n//         //fetch 的用法︰(沒有傳值，只是取值)\n//       fetch( 'https://api.github.com/users/jserv/repos',{method:\"GET\"})\n//       .then(res => res.json())\n//       .then(data => {\n//             /*接到request data後要做的事情*/\n//             this.setState({repoName: data[0]['name']});\n//       })\n//       .catch(e => {\n//           /*發生錯誤時要做的事情*/\n//           console.log(e);\n//       })\n//     }\n//     render() {\n//                 /* 在 HTML 的元素之中，直接用 javascript 的語法，來判斷簡單的顯示值 */\n//                 /* 記得用 {} */\n//         return (\n//           <div className=\"App\">\n//             <div className=\"data-display\">\n//               {(this.state.repoName===null)?\"目前還有沒有資料\":this.state.repoName}\n//             </div>\n//             <button onClick={this.handleClick}>取得jserv以英文字母排序的第一個repo</button>\n//           </div>\n//       ) \n//     }\n//   };\n// #endregion\n// #region 1. 生命週期 getDerivedStateFromProps\n// class App extends Component{    /* 假設這個 App 剛出生，是個 Baby。這Baby的媽媽，老公姓Chang */\n//   // 生的第一步\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//         isRightDad: true  /* 天生都假設它有正確的爸爸 */\n//     }\n//   }\n//   // 生的第二步\n//   static getDerivedStateFromProps(props,state){\n//       if(props.dad!==\"Chang\") /* 如果後來initialite時，我們傳入的爸爸參數，他不姓張 */\n//         return {isRightDad:false}  /* 那就是不正確的爸爸囉~ */\n//   }\n//     // 生的第三步\n//     render(){     //用 javascript 來判斷，要產出什麼的結果。\n//         if(this.state.isRightDad===true)\n//             return(\n//                 <div>\n//                     張小朋友\n//                 </div>\n//             );\n//         else\n//             return(\n//                 <div>\n//                     X小朋友\n//                 </div>\n//             );\n//     }\n// }\n// #endregion \n// #region 2. 生命週期 componentDidMount\n// 錯誤例子，在 render之中，想去改 return 之後的結果 : \n// class App extends Component{\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//         isRightDad: true\n//     }\n//   }\n//   static getDerivedStateFromProps(props,state){\n//       if(props.dad!==\"Chang\")\n//         return {isRightDad:false}\n//   }\n//     render(){\n//             if(this.state.isRightDad===true)\n//                 document.getElementById('msg').innerHTML=\"張小朋友\";\n//             else\n//                 document.getElementById('msg').innerHTML=\"X小朋友\";\n//             return(\n//                 <div id=\"msg\">\n//                     讀取中\n//                 </div>\n//             );\n//     }\n// }\n// 想改 render 後的結果 \n// (因為有了可以容納結果的DOM，我們再去做fetch，就比較有地方輸入回傳的資料)\n// 正確的例子︰\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  // 1\n  constructor(props) {\n    super(props);\n    this.state = {\n      isRightDad: true\n    };\n  } //2\n\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.dad !== \"Chang\") return {\n      isRightDad: false\n    };\n  } // 4\n\n\n  componentDidMount() {\n    if (this.state.isRightDad === true) document.getElementById('msg').innerHTML = \"張小朋友\";else document.getElementById('msg').innerHTML = \"X小朋友\";\n  } // 3\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"msg\",\n      children: \"\\u8B80\\u53D6\\u4E2D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 17\n    }, this);\n  }\n\n} // #endregion 2\n// 永遠都在的︰(沒有export就沒辨法被import)\n\n\nexport default App;","map":{"version":3,"names":["logo","React","Component","App","constructor","props","state","isRightDad","getDerivedStateFromProps","dad","componentDidMount","document","getElementById","innerHTML","render"],"sources":["C:/Users/User/source/repos/Learning/React/hello-world/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n//import React from 'react'; // <--記得要寫？\nimport React,{Component} from 'react'; // 用作 Class Component ， 也為了展示 Debug\n//import React, { useState } from 'react'; // 為了 useState ( Function Component )\n\n\n// #region 檔案原生的\n\n// function App() {\n//   return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n\n//   );\n// }\n\n// #endregion\n\n// props = 自訂元素 中的 自訂Attribute \n\n// #region 1. 傳文字\n\n// function App(props){ \n//   return(\n//        <button>{props.name}</button>\n//   );\n// }\n\n// #endregion 1\n\n// #region 2. 傳文字和方法\n\n// function App(props){ \n//   return(\n//     <button onClick={props.handleClick}>{props.name}</button>\n//   );\n// }\n\n// #endregion\n\n// #region 3. 傳children\n\n// function App(props){ \n//   return(\n//     <button>{props.children}</button>\n//   );\n// }\n\n// #endregion\n\n//---------------------------\n// Function component 為上述\n// class component 為下述 (extends Component) 上方的引用也要改成︰import React,{Component} from 'react';\n//---------------------------\n\n// #region 1. extends Component 和 使用render方法\n\n// class App extends Component{ //繼承Component類別\n//   render(){ // 以render 來 包住 return\n//     return(\n//       <div>\n//         helloWorld\n//       </div>\n//     );\n//   }\n// }\n\n// #endregion 1\n\n// #region 2. 傳 props 值\n\n// class App extends Component{\n  \n//   // constructor(props) { // 加入建構子以及props參數?\n//   //     super(props); \n//   // }\n\n//   // 雖然教材提到要constructor，但是我封了它，程式才能正常跑？ Warning 如下︰\n//   // A \"useless constructor\" is one that the linter is warning you can safely remove from the code,\n//   // because it doesn't accomplish anything - \n//   // if all you have is a super call (with the same argument the class is created with), \n//   // the constructor doesn't do anything useful, because classes will already call super automatically\n//   // 出處︰https://stackoverflow.com/questions/63609257/what-is-a-useless-constructor-in-react\n   \n//   render(){\n\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n\n//   }\n// }\n\n// #endregion 2\n\n// #region 3. 對應 index.js 的 3，作失敗的例子。\n\n// class App extends Component{\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n\n// #endregion\n\n// #region 4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n\n//      ??但是方法的值，又如傳入呢？使用state:\n\n// class App extends Component{\n\n//   constructor(props) { \n//      super(props);\n\n//      //this.name=\"舊的名字\"; // 加入name? 但這個只能設，不能改\n\n//      // 下面的加起來才能改 : \n\n//      this.changeName=this.changeName.bind(this); //方法要綁定自己的方法 <-- 我就當是宣告的一部份好了，雖然有點冗餘。\n//      this.state=\n//      {\n//       name:\"舊的名字\"\n//      }\n\n//   }\n\n// 定義changeName\n\n//   changeName(newName){       \n//     //this.name=newName;     // 行不通\n//     //console.log(\"hey\")     // <- 證明只會被跳過\n\n//     this.setState({name:\"新的名字\"})\n\n//   }\n   \n//   render(){\n//     return(\n//       <button onClick={this.changeName}>{this.state.name} </button>\n//     );\n//   }\n\n// }\n  \n// #endregion 4\n\n// #region 5. 承上的多一個練習 (比較清淅)\n\n// class App extends Component{\n\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//       percent:\"30%\"\n//     }\n//     this.changePercent=this.changePercent.bind(this); //綁定changePercent\n//   }\n\n//   changePercent(){ //加入changePercent函式\n\n//     if(this.state.percent === \"30%\")\n//       this.setState({percent:\"70%\"})\n//     else\n//       this.setState({percent:\"30%\"})\n//   }\n\n//     render(){\n//         return(\n//           <div>\n//             <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//               <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//             </div>\n//             <button onClick={this.changePercent}>30% <code>-</code>70% </button>\n//           </div>\n//         );\n//     }\n// }\n\n// #endregion 5\n\n// #region 6. state 的特性 (沒有對應去跑看看的例子，只是用來看看)\n\n// class App extends Component{\n\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//       percent: 20,\n//       mounted: false, // 存在但沒有被寫到的state 不會被移除\n//       // 除非用setState移除state\n\n//       // 對於state中的多屬性的物件，不能只修改單一屬性\n//       styleData:{\n//         width: \"30%\",\n//         height: \"50%\"\n//       }     \n\n//     }\n\n//     this.changePercent=this.changePercent.bind(this); //綁定changePercent\n  \n//   }\n\n//   changePercent(){ \n\n//     this.setState({percent:\"70%\",counter:0});\n//     // counter 會自動建立為一個 state 的值\n//     // 如果在 constructor 連 state 的宣告都沒寫，就會自動建立 state。\n\n    \n//     // 對於state中的有多個屬性的物件，不能只修改單一屬性\n//     //  this.setState({ styleData:{width:\"70%\"} });\n\n//     // 這個把 height: \"50%\" 這個 styleData 抹去。\n//     // 如果想要只更改state內的物件的單一屬性並保留其他屬性，可以這樣寫:\n//     // this.setState({ \n//     //   styleData:{\n//     //       width: \"70%\",\n//     //       height: this.state.styleData.height\n//     //   } \n//     // });\n\n//     //setState通常需要花一點細微的時間，雖然不會察覺，但是由於這點加上js的非同步特性，\n//     //在setState後面用到state的函式「常常會拿到改變前的state值」????\n\n//     // 這個時候可以搭配setState預設的第二個參數。:\n//     // setState的第二個參數可有可無，它是個function，當state被設定完之後，就會執行\n\n//     // this.setState(\n//     //   {percent: 70}, // 第一個參數是設定的動作\n//     //   ()=>{console.log(this.state.percent);} // 第二個參數是一個會執行的動作\n//     // ) \n//     // 這樣會改了值之後，再印出70來。<-- 作用是來確定這件事情已經做完，不會拿到之前的值嗎？\n\n//   }\n\n//   deleteState()\n//   {\n//     this.setState({mounted: undefined});\n//   }\n\n//   createState()\n//   {\n//     let counter=5;\n//     this.setState({counter});\n//     /* 如果目前的state有counter,把它指定為5。如果沒有，則創造一個叫counter的state */\n//   }\n\n//     render(){\n//         return(\n//           <div>\n//             <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//               <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//             </div>\n//             <button onClick={this.changePercent}>30% <code>-</code>70% </button>\n//           </div>\n//         );\n//     }\n// }\n\n// #endregion 6\n\n//---------------------------\n// Function component 使用 useState\n//---------------------------\n\n// #region 1. useState  \n\n// import React, { useState } from 'react'; 上方 import\n\n// 注意︰width:percent 和 onClick={()=>{changePercent(\"70%\")}} \n\n// const App=()=>{\n\n//     const [percent, changePercent] = useState(\"30%\");//<- 設值兼定義方法\n\n//     return( //  不用 render 方法\n//       <div>\n//         <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//           <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//         </div>\n//         <button onClick={()=>{changePercent(\"70%\")}}>轉換百分比 </button>\n//       </div>\n//     );\n\n// }\n\n// #endregion 1\n\n// #region 2. 展示 Debug\n\n// class App extends Component{\n\n//     constructor(props) {\n//       super(props);\n//       this.state={\n//         percent:\"30%\"\n//       }\n//       this.name=\"舊的名字\"; // 這並不是this.props.name 要小心搞混了。\n//       this.changePercent = this.changePercent.bind(this);\n//     }\n  \n//     changePercent(){\n//       this.setState({percent:(this.state.percent===\"70%\")?\"30%\":\"70%\"}); // 在setState之中 給簡單的方法 來回傳值\n//       console.log(\"hey\");\n//     }\n  \n//     render(){\n//         return(\n//         <div>\n//               <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//                 <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//               </div>\n//               <button onClick={this.changePercent}> {this.props.children} </button>\n//               {this.props.name}\n//         </div>\n//         );\n//     }\n\n// }\n\n// #endregion 2\n\n// #region 1. fetch\n\n// class App extends Component {\n\n//     constructor(props) {\n//       super(props);\n//       this.state={\n//         repoName: null\n//       }\n//       this.handleClick=this.handleClick.bind(this);\n//     }\n  \n    \n//     handleClick(){\n\n//         //fetch 的用法︰(沒有傳值，只是取值)\n\n//       fetch( 'https://api.github.com/users/jserv/repos',{method:\"GET\"})\n//       .then(res => res.json())\n//       .then(data => {\n//             /*接到request data後要做的事情*/\n//             this.setState({repoName: data[0]['name']});\n//       })\n//       .catch(e => {\n//           /*發生錯誤時要做的事情*/\n//           console.log(e);\n//       })\n//     }\n    \n//     render() {\n                \n//                 /* 在 HTML 的元素之中，直接用 javascript 的語法，來判斷簡單的顯示值 */\n//                 /* 記得用 {} */\n//         return (\n//           <div className=\"App\">\n//             <div className=\"data-display\">\n//               {(this.state.repoName===null)?\"目前還有沒有資料\":this.state.repoName}\n//             </div>\n//             <button onClick={this.handleClick}>取得jserv以英文字母排序的第一個repo</button>\n//           </div>\n//       ) \n\n//     }\n//   };\n\n// #endregion\n\n// #region 1. 生命週期 getDerivedStateFromProps\n\n// class App extends Component{    /* 假設這個 App 剛出生，是個 Baby。這Baby的媽媽，老公姓Chang */\n\n//   // 生的第一步\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//         isRightDad: true  /* 天生都假設它有正確的爸爸 */\n//     }\n//   }\n\n//   // 生的第二步\n//   static getDerivedStateFromProps(props,state){\n\n//       if(props.dad!==\"Chang\") /* 如果後來initialite時，我們傳入的爸爸參數，他不姓張 */\n//         return {isRightDad:false}  /* 那就是不正確的爸爸囉~ */\n\n//   }\n\n//     // 生的第三步\n//     render(){     //用 javascript 來判斷，要產出什麼的結果。\n\n//         if(this.state.isRightDad===true)\n//             return(\n//                 <div>\n//                     張小朋友\n//                 </div>\n//             );\n//         else\n//             return(\n//                 <div>\n//                     X小朋友\n//                 </div>\n//             );\n\n//     }\n// }\n\n// #endregion \n\n// #region 2. 生命週期 componentDidMount\n\n// 錯誤例子，在 render之中，想去改 return 之後的結果 : \n\n// class App extends Component{\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//         isRightDad: true\n//     }\n//   }\n\n//   static getDerivedStateFromProps(props,state){\n//       if(props.dad!==\"Chang\")\n//         return {isRightDad:false}\n//   }\n  \n//     render(){\n//             if(this.state.isRightDad===true)\n//                 document.getElementById('msg').innerHTML=\"張小朋友\";\n//             else\n//                 document.getElementById('msg').innerHTML=\"X小朋友\";\n//             return(\n//                 <div id=\"msg\">\n//                     讀取中\n//                 </div>\n//             );\n//     }\n// }\n\n// 想改 render 後的結果 \n// (因為有了可以容納結果的DOM，我們再去做fetch，就比較有地方輸入回傳的資料)\n// 正確的例子︰\n\nclass App extends Component{\n\n  // 1\n  constructor(props) {\n    super(props);\n    this.state={\n        isRightDad: true\n    }\n  }\n\n  //2\n  static getDerivedStateFromProps(props,state){\n      if(props.dad!==\"Chang\")\n        return {isRightDad:false}\n  }\n\n  // 4\n  componentDidMount(){\n    if(this.state.isRightDad===true)\n        document.getElementById('msg').innerHTML=\"張小朋友\";\n    else\n        document.getElementById('msg').innerHTML=\"X小朋友\";\n  }\n\n  // 3\n    render(){\n            return(\n                <div id=\"msg\">\n                    讀取中\n                </div>\n            );\n    }\n}\n\n\n// #endregion 2\n\n// 永遠都在的︰(沒有export就沒辨法被import)\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,KAAP,IAAcC,SAAd,QAA8B,OAA9B,C,CAAuC;AACvkBD,SAAlB,CAA2B;EAEzB;EACAE,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAW;MACPC,UAAU,EAAE;IADL,CAAX;EAGD,CARwB,CAUzB;;;EAC+B,OAAxBC,wBAAwB,CAACH,KAAD,EAAOC,KAAP,EAAa;IACxC,IAAGD,KAAK,CAACI,GAAN,KAAY,OAAf,EACE,OAAO;MAACF,UAAU,EAAC;IAAZ,CAAP;EACL,CAdwB,CAgBzB;;;EACAG,iBAAiB,GAAE;IACjB,IAAG,KAAKJ,KAAL,CAAWC,UAAX,KAAwB,IAA3B,EACII,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,SAA/B,GAAyC,MAAzC,CADJ,KAGIF,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,SAA/B,GAAyC,MAAzC;EACL,CAtBwB,CAwBzB;;;EACEC,MAAM,GAAE;IACA,oBACI;MAAK,EAAE,EAAC,KAAR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAKP;;AA/BsB,C,CAmC3B;AAEA;;;AACA,eAAeX,GAAf"},"metadata":{},"sourceType":"module"}