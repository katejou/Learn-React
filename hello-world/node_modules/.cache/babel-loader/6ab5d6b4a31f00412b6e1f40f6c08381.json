{"ast":null,"code":"import logo from './logo.svg';\nimport './App.css'; //import React from 'react'; // <--記得要寫？\n\nimport React, { Component } from 'react'; // extends Component 用\n// function App() {\n//   return (\n// <div className=\"App\">\n//   <header className=\"App-header\">\n//     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//     <p>\n//       Edit <code>src/App.js</code> and save to reload.\n//     </p>\n//     <a\n//       className=\"App-link\"\n//       href=\"https://reactjs.org\"\n//       target=\"_blank\"\n//       rel=\"noopener noreferrer\"\n//     >\n//       Learn React\n//     </a>\n//   </header>\n// </div>\n//   );\n// }\n// 在函式參數中加入props --------\n// 1.\n// function App(props){ \n//   return(\n//        <button>{props.name}</button>\n//   );\n// }\n// 2.\n// function App(props){ \n//   return(\n//     <button onClick={props.handleClick}>{props.name}</button>\n//   );\n// }\n// 3.\n// function App(props){ \n//   return(\n//     <button>{props.children}</button>\n//   );\n// }\n// Function component 為上述\n// class component 為下述\n// 1. 使用render方法\n// class App extends Component{ //繼承Component類別\n//   render(){ // 以render 來 包住 return\n//     return(\n//       <div>\n//         helloWorld\n//       </div>\n//     );\n// }\n// }\n// 2.  傳 props 值\n// class App extends Component{\n//   // constructor(props) { // 加入建構子以及props參數?\n//   //     super(props); \n//   // }\n//   // 雖然教材提到要constructor，但是我封了它，程式才能正常跑？\n//   // A \"useless constructor\" is one that the linter is warning you can safely remove from the code,\n//   // because it doesn't accomplish anything - \n//   // if all you have is a super call (with the same argument the class is created with), \n//   // the constructor doesn't do anything useful, because classes will already call super automatically\n//   // 出處︰https://stackoverflow.com/questions/63609257/what-is-a-useless-constructor-in-react\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n// 3.\n// class App extends Component{\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n// 4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n//    ??但是方法的值，又如傳入呢？使用state\n// class App extends Component{\n//   constructor(props) { \n//      super(props);\n//      //this.name=\"舊的名字\"; // 加入name? 但這個只能設，不能改\n//      this.changeName=this.changeName.bind(this); //綁定至自己\n//      this.state=\n//      {\n//       name:\"舊的名字\"\n//      }\n//   }\n//   changeName(newName){ // 定義changeName\n//     //this.name=newName; // 行不通\n//     this.setState({name:\"新的名字\"})\n//     console.log(\"hey\")\n//   }\n//   render(){\n//     return(\n//       <button onClick={this.changeName}>{this.state.name} </button>\n//     );\n//   }\n// }\n// 5. 承上的多一個練習\n// class App extends Component{\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//       percent:\"30%\"\n//     }\n//     this.changePercent=this.changePercent.bind(this); //綁定changePercent\n//   }\n//   changePercent(){ //加入changePercent函式\n//     if(this.state.percent === \"30%\")\n//       this.setState({percent:\"70%\"})\n//     else\n//       this.setState({percent:\"30%\"})\n//   }\n//     render(){\n//         return(\n//           <div>\n//             <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//               <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//             </div>\n//             <button onClick={this.changePercent}>30% <code>-</code>70% </button>\n//           </div>\n//         );\n//     }\n// }\n// 6. state 的特性\n// setState中「存在但沒有被寫到的state」不會被移除\n// class App extends Component{\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//       percent: 20,\n//       mounted: false, // 存在但沒有被寫到的state 不會被移除\n//       // 除非用setState移除state\n//       // 對於state中的多屬性的物件，不能只修改單一屬性\n//       styleData:{\n//         width: \"30%\",\n//         height: \"50%\"\n//       }     \n//     }\n//     this.changePercent=this.changePercent.bind(this); //綁定changePercent\n//   }\n//   changePercent(){ \n//     this.setState({percent:\"70%\",counter:0});\n//     // counter 會自動建立為一個 state 的值\n//     // 如果在 constructor 連 state 的宣告都沒寫，就會自動建立 state。\n//     // 對於state中的有多個屬性的物件，不能只修改單一屬性\n//     //  this.setState({ styleData:{width:\"70%\"} });\n//     // 這個把 height: \"50%\" 這個 styleData 抹去。\n//     // 如果想要只更改state內的物件的單一屬性並保留其他屬性，可以這樣寫:\n//     // this.setState({ \n//     //   styleData:{\n//     //       width: \"70%\",\n//     //       height: this.state.styleData.height\n//     //   } \n//     // });\n//     //setState通常需要花一點細微的時間，雖然不會察覺，但是由於這點加上js的非同步特性，\n//     //在setState後面用到state的函式「常常會拿到改變前的state值」????\n//     // 這個時候可以搭配setState預設的第二個參數。?\n//     // setState的第二個參數可有可無，它是個function，當state被設定完之後，就會執行\n//     // this.setState(\n//     //   {percent: 70}, // 第一個參數是設定的動作\n//     //   ()=>{console.log(this.state.percent);} // 第二個參數是一個會執行的動作\n//     // ) // 這樣會印出70\n//   }\n//   deleteState()\n//   {\n//     this.setState({mounted: undefined});\n//   }\n//   createState()\n//   {\n//     let counter=5;\n//     this.setState({counter});\n//     /* 如果目前的state有counter,把它指定為5。如果沒有，則創造一個叫counter的state */\n//   }\n//     render(){\n//         return(\n//           <div>\n//             <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//               <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//             </div>\n//             <button onClick={this.changePercent}>30% <code>-</code>70% </button>\n//           </div>\n//         );\n//     }\n// }\n// 7.  \n// 永遠都在的︰(沒有export就沒辨法被import)\n\nexport default App;","map":{"version":3,"names":["logo","React","Component","App"],"sources":["C:/Users/User/source/repos/Learning/React/hello-world/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n//import React from 'react'; // <--記得要寫？\nimport React,{Component} from 'react'; // extends Component 用\n\n// function App() {\n//   return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n\n//   );\n// }\n\n\n// 在函式參數中加入props --------\n\n// 1.\n\n// function App(props){ \n//   return(\n//        <button>{props.name}</button>\n//   );\n// }\n\n// 2.\n\n// function App(props){ \n//   return(\n//     <button onClick={props.handleClick}>{props.name}</button>\n//   );\n// }\n\n// 3.\n\n// function App(props){ \n//   return(\n//     <button>{props.children}</button>\n//   );\n// }\n\n// Function component 為上述\n// class component 為下述\n\n\n// 1. 使用render方法\n// class App extends Component{ //繼承Component類別\n//   render(){ // 以render 來 包住 return\n//     return(\n//       <div>\n//         helloWorld\n//       </div>\n//     );\n// }\n// }\n\n// 2.  傳 props 值\n\n// class App extends Component{\n  \n//   // constructor(props) { // 加入建構子以及props參數?\n//   //     super(props); \n//   // }\n\n//   // 雖然教材提到要constructor，但是我封了它，程式才能正常跑？\n//   // A \"useless constructor\" is one that the linter is warning you can safely remove from the code,\n//   // because it doesn't accomplish anything - \n//   // if all you have is a super call (with the same argument the class is created with), \n//   // the constructor doesn't do anything useful, because classes will already call super automatically\n//   // 出處︰https://stackoverflow.com/questions/63609257/what-is-a-useless-constructor-in-react\n   \n//   render(){\n\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n\n//   }\n// }\n\n// 3.\n// class App extends Component{\n//   render(){\n//     return(\n//       <button onClick={this.props.handleClick}>{this.props.name}</button>\n//     );\n//   }\n// }\n\n// 4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n//    ??但是方法的值，又如傳入呢？使用state\n// class App extends Component{\n\n//   constructor(props) { \n//      super(props);\n//      //this.name=\"舊的名字\"; // 加入name? 但這個只能設，不能改\n//      this.changeName=this.changeName.bind(this); //綁定至自己\n//      this.state=\n//      {\n//       name:\"舊的名字\"\n//      }\n//   }\n\n//   changeName(newName){ // 定義changeName\n//     //this.name=newName; // 行不通\n//     this.setState({name:\"新的名字\"})\n//     console.log(\"hey\")\n//   }\n   \n//   render(){\n//     return(\n//       <button onClick={this.changeName}>{this.state.name} </button>\n//     );\n//   }\n\n// }\n  \n\n// 5. 承上的多一個練習\n\n// class App extends Component{\n\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//       percent:\"30%\"\n//     }\n//     this.changePercent=this.changePercent.bind(this); //綁定changePercent\n//   }\n\n//   changePercent(){ //加入changePercent函式\n\n//     if(this.state.percent === \"30%\")\n//       this.setState({percent:\"70%\"})\n//     else\n//       this.setState({percent:\"30%\"})\n//   }\n\n//     render(){\n//         return(\n//           <div>\n//             <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//               <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//             </div>\n//             <button onClick={this.changePercent}>30% <code>-</code>70% </button>\n//           </div>\n//         );\n//     }\n// }\n\n\n// 6. state 的特性\n// setState中「存在但沒有被寫到的state」不會被移除\n\n// class App extends Component{\n\n//   constructor(props) {\n//     super(props);\n//     this.state={\n//       percent: 20,\n//       mounted: false, // 存在但沒有被寫到的state 不會被移除\n//       // 除非用setState移除state\n\n//       // 對於state中的多屬性的物件，不能只修改單一屬性\n//       styleData:{\n//         width: \"30%\",\n//         height: \"50%\"\n//       }     \n\n//     }\n\n//     this.changePercent=this.changePercent.bind(this); //綁定changePercent\n  \n//   }\n\n//   changePercent(){ \n\n//     this.setState({percent:\"70%\",counter:0});\n//     // counter 會自動建立為一個 state 的值\n//     // 如果在 constructor 連 state 的宣告都沒寫，就會自動建立 state。\n\n    \n//     // 對於state中的有多個屬性的物件，不能只修改單一屬性\n//     //  this.setState({ styleData:{width:\"70%\"} });\n\n//     // 這個把 height: \"50%\" 這個 styleData 抹去。\n//     // 如果想要只更改state內的物件的單一屬性並保留其他屬性，可以這樣寫:\n//     // this.setState({ \n//     //   styleData:{\n//     //       width: \"70%\",\n//     //       height: this.state.styleData.height\n//     //   } \n//     // });\n\n//     //setState通常需要花一點細微的時間，雖然不會察覺，但是由於這點加上js的非同步特性，\n//     //在setState後面用到state的函式「常常會拿到改變前的state值」????\n\n//     // 這個時候可以搭配setState預設的第二個參數。?\n//     // setState的第二個參數可有可無，它是個function，當state被設定完之後，就會執行\n//     // this.setState(\n//     //   {percent: 70}, // 第一個參數是設定的動作\n//     //   ()=>{console.log(this.state.percent);} // 第二個參數是一個會執行的動作\n//     // ) // 這樣會印出70\n\n\n//   }\n\n//   deleteState()\n//   {\n//     this.setState({mounted: undefined});\n//   }\n\n//   createState()\n//   {\n//     let counter=5;\n//     this.setState({counter});\n//     /* 如果目前的state有counter,把它指定為5。如果沒有，則創造一個叫counter的state */\n//   }\n\n//     render(){\n//         return(\n//           <div>\n//             <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//               <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:this.state.percent,height:\"100%\",borderRadius:\"10px\"}}></div>\n//             </div>\n//             <button onClick={this.changePercent}>30% <code>-</code>70% </button>\n//           </div>\n//         );\n//     }\n// }\n\n\n// 7.  \n\n\n\n\n\n// 永遠都在的︰(沒有export就沒辨法被import)\nexport default App;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,KAAP,IAAcC,SAAd,QAA8B,OAA9B,C,CAAuC;AAEvC;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;;AACA,eAAeC,GAAf"},"metadata":{},"sourceType":"module"}