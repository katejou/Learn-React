{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\source\\\\repos\\\\Learning\\\\React\\\\hello-world\\\\src\\\\index.js\";\n\n/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport App from './App';\nimport App2 from './App2';\nimport Rich_Parent from './Rich_Parent';\nimport Poor_Parent from './Poor_Parent'; //import {GrandPa,Son,GrandSon} from './GrandPa';\n\nimport GrandPa from './GrandPa';\nimport GrandPaPa from './GrandPaPa'; // Debug 用的?\n//import * as serviceWorker from './serviceWorker'; \n// 這個是教材沒寫到的，新(2022?)的指(綁)定 index.html 元素的方法︰\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root') // index.html的DOM\n); // 或 createElement ？這個還沒有教到。\n// JSX 語法\n// #region  1. Hello world! 將 DOM 元素，render 進 index.html\n// const element = <h1>Hello world!!!!!</h1>;\n// root.render(element);\n// #endregion 1\n// #region  2. 同上\n// const element = <button>大家好</button>\n// root.render(element);\n// #endregion 2\n// #region  3. 傳入方法 ()=>\n// const element =()=>{\n//   return( <button>大家好</button> );\n// }\n// root.render(element());\n// #endregion 3\n// #region  4. 傳入方法 ()=> 只能 return 一個元素\n// const testFunction =()=> {\n//   return( \n//       <div> \n//           <button> 大家好 </button>\n//           <h1> 我很好 </h1>\n//       </div>\n//   );\n// }\n// // 一定要加 div 將兩個 DOM 包成一個。\n// root.render(testFunction());\n// #endregion\n// #region  5. 在JSX中需要用到javascript的變數/函式...時，就要用{}包起來\n// const showOne = true;\n// root.render(\n//     <h1> { (showOne === true) ? 1 : 0 } </h1>\n// );\n//#endregion 5\n// #region  6. 設定字串 > 字串中，放入字串{}\n// 字串中，放入字串{}\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// root.render(\n//   <h1 style = { styleArgument } > Hello, world! </h1>\n// );\n//  #endregion  6\n// #region  6.5. 反正記得 style = {{}}\n// HTML之中放入字串？\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// const element = <h1 style = { styleArgument } > Hello, world! </h1>;\n// root.render(element);\n// {{}} : 在HTML之中，表示\"\"指定屬性的字串？ X 下方用來指定class的也不是這樣…\n// 外面那層括號代表裡面是javascript語法，裡面的括號表示物件型態 <- 還是看不懂\n// 反正記得 style = {{}}\n// const element = <h1 style = { { fontSize: '100px', color: 'red' } } > Hello, world! </h1>;\n// root.render(element);\n// #endregion 6.5\n// #region  7. 設定 DOM 屬性時 「class」屬性變成「className」\n// const element = <h1 className = \"title\" > Hello, world! </h1>\n// root.render(element);\n// #endregion 7\n// #region  8. 透過JSX結合javascript運算式\n// 例子︰迴圈\n// const multiButton=()=>{\n//   var output=[];\n//   for(let i=0;i<4;++i)\n//       output.push(<button>我是第{i+1}個按鍵</button>)\n//   return output;\n// }\n// root.render(multiButton());\n// #endregion 8\n// #region  9. 屬性給布林值，true的話，可直接省略。(最終都會render成true)\n// 死記 value 是 {}，style 是 {{}} ???\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value={true} > 是 </button>\n//           <br/>\n//           <button value > 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// #endregion 9\n// #region  10. onClick , C要大寫。和value一樣要 = {}\n// onChange 同理，因為JSX都是駝峰字。\n// 方法所收的都是event，event.target就是該呼叫的元素…\n// const getValue=(event)=>{\n//   console.log(event.target.value)\n//   alert(event.target.value);\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={getValue}> 是(value=true) </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// #endregion 10\n// #region  11. 箭頭函式 包入多個 function\n// const myFunction1=(event)=>{ // event可略\n//   console.log(\"F1\");\n//   alert(\"F1\");\n// }\n// const myFunction2=(event)=>{\n//   //alert(event.target.value); // 小心，(e)=> 根本沒有event的傳入\n//   console.log(\"F2\");\n//   alert(\"F2\");\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1();myFunction2()}}> 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// 在瀏覽器的F12看不到元素上依附的onclick方法，但做還是會做…\n// React這樣做，比較沒有那麼容易給「使用者」看穿﹑亂改﹑找漏洞?\n// 還比較好去編輯？(我想是優點吧。)\n// 箭頭函式 : 想傳什麼參數、使用幾個函式、做什麼運算都可以。缺點是很容易讓版面看起來很亂。\n// #endregion  11\n// #region  11.5  另一個傳入值，而不是傳入 event 的方法\n// const myFunction1=(val)=>{\n//   console.log(val);\n//   alert(val);\n// }\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1(e.target.value);}}> 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n// 在JSX綁定js資料、函式時，一定要加上{}\n// 剛開始很容易照以前的習慣直接用屬性=\"綁上去的東西\"\n// 這樣的話等同於在傳字串。\n// #endregion 11.5\n// #region  React Component (自訂元素) 簡介\n// 這個語法讓我們可以把程式碼以函式(或是class，後面會提到)包成模組，\n// 變成一個自己訂作的元素，\n// 然後用跟使用button、div這些元素一樣的語法在JSX中使用\n// 元素名稱第一個字母必須要是大寫、和函式(或class)名稱相同\n// #endregion\n// #region  1. (Funtion Component)簡單例子\n// function App(){\n//   return(\n//     <button>大家好</button>\n//   );\n// }\n// root.render( <div> <App/> </div> );\n// #endregion 1\n// #region  2. 於 render 可重覆使用\n// function Progress(){\n//   const barWidth=\"50%\";\n//   return(\n//       <div>\n//           <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//           <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:barWidth,height:\"100%\",borderRadius:\"10px\"}}></div>\n//       </div>\n//     </div>\n//   );\n// }\n// root.render(\n//       <Progress/>\n//       <Progress/>\n// );\n// #endregion 2.\n// #region  3. 從鄰檔引用自訂元素\n// 上方要︰import App from './App';\n// 意思是指將隔壁 App.js 的 App 方法引用進來。供下方使用\n//root.render(<App/>);\n// #endregion 3\n// props = 自訂元素 中的 自訂Attribute\n// 「也」要去改 App.js 這個檔案\n// #region  1. 主檔(index.js)和附檔(App.js)之間的傳值 \n// root.render(<div><App name='大家好'/></div>);\n// #endregion 1\n// #region  傳接資料的型別問題\n// 文字''/\"\"\n//root.render(<div><App number=\"87\" getData=\"true\"/></div>);\n// 其他型別 {}\n//root.render(<div><App number={87} getData={true}/></div>);\n// 使用變數? props是唯讀\n// 他說︰有的時候我們就是想要在元件自己這更改props，這個時候就要用比較迂迴的做法。在後面講...\n// #endregion\n// #region  2. 將onClick會做的事，傳到寫好的自訂元件\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div> \n// );\n// #endregion\n// #region  3. 在react component中，我們把包在標籤中間的東西，稱為children。\n// <元素名稱> (其他的東西) </元素名稱>\n//  (其他的東西) = children\n// root.render(<div><App> children </App></div>);\n// 不同的children間能互相影響，和一個叫state的東東有關係，但作者還是說之後再……\n// #endregion\n// ------------------\n// component = 自訂元素\n// Function component 為上述 (直接在這個檔)\n// class component 為下述 (從外檔引入)\n// https://zh-hant.reactjs.org/docs/components-and-props.html\n// ------------------\n// #region   1. 使用render方法\n//root.render(<App/>);\n// #endregion 1\n// #region   2. 傳 props 值\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n//#endregion 2\n// #region   3. 會跑，但是不會有改變，只會看到 log 中的 hey\n// const changeName=(newName)=>{ \n//   name=newName;\n//   console.log(\"hey\")//加入此行\n// }\n// var name=\"舊的名字\";\n// root.render(\n//     <div>\n//         <App name={name} handleClick={changeName}/> \n//         {/* 就算是 changeName(\"新的名字\") 也傳不入參數，程式會死，連log都不寫 */}\n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n// #endregion 3\n// #region   4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n// 詳見 App.js\n// root.render(\n//     <div>\n//         <App/> \n//     </div>\n// );\n//  #endregion 4\n// #region   5. 多一個進度條的練習\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n//#endregion 5\n// #region   6. state 的特性\n// 詳見App.js\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n//#endregion  6\n// ( 回到 function component )  \n// #region   1. useState   \n// React hook出現了，\n// 它提供一系列讓你能在function component中使用「在class component常用的功能」的方法，\n// useState就是其中之一。\n// const [percent, changePercent] = useState(\"20%\");\n// 我們宣告了一個變數和一個函式，第一個percent是變數\n// 而第二個 changePercent 變成了等同於 (值)=>{this.setState({percent:值})}\n// 函式在語法上沒有限定命名原則，但一般會以 set 做為開頭 ( changePercent 該為 setPercent )\n// const [percent, changePercent] = ....，是利用javascript的解構賦值\n// useState只是一個函式，它會接收一作為初始值的參數 並回傳一個包含兩個值的array，\n// 回傳︰第一個值是 state 、 第二個值是用來對剛那個 state 做 setState 的函式\n// 實作詳見︰ App.js\n//root.render(<div><br/><br/><App/></div>);\n// #endregion 1 \n// #region useState(和其他的React hook) 的特質\n// 不能在function component中的迴圈、if-else、nest function\n// (在function scope中宣告的function)被定義使用\n// 對useState而言，它是依照(render的)順序去分辨每一個hook，\n// 而不是用我們的定義內容/來接的變數的名字去分辨\n// 所以 re-render 的時候…如果有迴圈什麼的，就會全亂了。\n//  總結︰ function component 的 useState 是比較簡潔\n//          但功能是真的不多，和 class component 對比。\n// #endregion\n// #region   2. debug : React-Developer-Tools\n// 當專案規模到一定程度的時候，\n// state、props和函式會變的很多，debug上越來越困難。\n// 這時我們就會用到一款在chrome上協助開發者debug的插件:React-Developer-Tools。\n// 引入︰import * as serviceWorker from './serviceWorker'；\n// root.render\n// (    \n// <div>\n//   <br/>\n//   <br/>\n//   <App name=\"我是進度條\">在index.js中轉換百分比</App>\n// </div>\n// );\n// 在 chrome 線上應用程式商店，安裝 React-Developer-Tools\n// 可以在 More 之中，看出有什麼 Component ，還可以自由輸入 attribute 的值，即時看到效果。\n// 眼睛可以顯示位置\n// 當你在component點擊該元件後，回到console，輸入$r，就會跳出和此元件相關屬性，讓你可以選擇並搭配console做一些監控、模擬事件等等常見的debug方式。\n// #endregion\n// #region 使用 Http request - Fetch Api\n// 因為jQuery運作模式/渲染DOM的方式和React不太一樣，\n// 為避免發生衝突，一般「不會希望」在React中使用jQuery\n// Fetch Api是內建於JavaScript web api的一部份。使用時，不需要額外下載或嵌入CDN。\n// Fetch是一個Promise\n//    #region 基本架構︰\n// fetch( request的url, { /*設定request內容*/})\n//     .then(res => res.json()) /*把request json化*/\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n//    #endregion \n//    #region 使用GET︰\n// fetch( request的url, {method: \"GET\"}) /*設定使用GET*/\n//     .then(res => res.json()) \n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n//    #endregion\n//    #region 加上headers (Content Type)\n// fetch( request的url, {  method: \"GET\", headers: new Headers({ 'Content-Type': 'application/json',})   }\n// )\n// .then(res => res.json())\n// .then(data => {\n//     /*接到request data後要做的事情*/\n// })\n// .catch(e => {\n//   /*發生錯誤時要做的事情*/\n// })\n//    #endregion\n//    #region 加上headers (token)\n// const token = \"Bearer \"+ 我存好的token ;\n// fetch( request的url, {\n//         method: \"GET\",\n//         headers: new Headers({\n//             'Content-Type': 'application/json',\n//             'Authorization': token, /* 把token放在這 */\n//         })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n// )\n//    #endregion \n//    #region 加上body (JSON type)\n// const data= { A:\"資料A\", B:\"資料B\" }\n// fetch( request的url, {\n//         method: \"GET\",\n//         body: JSON.stringify(data),   /*<<<<<把json資料字串化*/\n//         headers: new Headers({\n//             'Content-Type': 'application/json'\n//         })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n//    #endregion\n//    #region 加上body (x-www-form-urlencoded type) 沒有用過…？\n// 資料處理\n// const data= { A:\"資料A\", B:\"資料B\" };\n// const formData = Object.keys(data).map(\n//     function (keyName) {\n//         return encodeURIComponent(keyName) + '=' + encodeURIComponent(data[keyName])\n//     }\n// ).join('&');\n// 使用\n// fetch( request的url, {\n//   method: \"GET\",\n//   body: formData,   /* <<<<< 使用處理後的資料*/\n//   headers: new Headers({\n//       \"Content-type\": \"application/x-www-form-urlencoded\"\n//   })\n// })\n// .then(res => res.json())\n// .then(data => {\n//     /*接到request data後要做的事情*/\n// })\n// .catch(e => {\n//   /*發生錯誤時要做的事情*/\n// })\n//    #endregion \n// #endregion Fetch 理論\n// #region   1. 實作 Fetch\n// 詳見 App.js\n//root.render(<App/>)\n// #endregion 1\n// #region   class component 生命週期\n//元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)\n//元件被安裝時(Mount) :\n//constructor() -> componentWillMount() -> render() -> 渲染DOM ->......(渲染後的生命週期)\n// version 17後，componentWillMount()將會被改為UNSAFE_componentWillMount()\n// 我自己CMD :　npm view react version  結果︰ 18.2.0 ，以Ver.16.3誕生的新週期函數static getDerivedStateFromProps()來代替。\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> ......(渲染後的生命週期)\n// 中間的這一步長這樣︰\n// static getDerivedStateFromProps(props,state){\n//   if(props.dad!==\"Chang\")\n//     return {isRightDad:false}\n// }\n// 這個函數最常使用的狀況是「用初始接收到的props」\n// 去設定第一次render時的state或是做其他的事情。\n// 這個函數是static，也就是this不能在這裡使用\n//(static指的是這函式不屬於以這個class被宣告出來的(單一個)物件，而是泛屬於此class類別的所有物件)。\n// 所以我們不能在getDerivedStateFromProps呼叫 「this」.setState !!! \n// 更改state的方法是用預寫好的規則 : 以這個函式的return值來設定\n// #endregion 1\n// #region   1. 生命週期實作 getDerivedStateFromProps\n// 詳見 App.js\n//root.render(<App dad=\"Chang\"/>);\n// #endregion 1\n// #region   補上，承下\n// 要注意的是，我們不希望在getDerivedStateFromProps()中做宣告/初始化的動作，\n// 如果可以的話就在constructor中做，\n// 其他如fetch或是動畫等，應該移到下一篇要講的componentDidMount()中來做。\n// #endregion  \n// #region   componentWillMount -> componentDidMount\n// componentWillMount(){\n//   if(this.props.dad!==\"Chang\")\n//     this.setState({isRightDad:false})\n// }\n//過去除了getDerivedStateFromProps()的功能外，\n//很多人會在這裡執行fetch以取得想在render()中使用的資料。<<<---這個是生命週期的重點。\n//例如token的檢查等等。(?)\n//然而官方表示，\n//如果在componentWillMount()這執行fetch，並不會等response進來才執行render。\n//又因為這是唯一會在 *server side (見註解)執行的生命週期函數，\n//導致它在server side和client side都會執行一次，\n//「重複執行」這件事並不符合我們對Mount週期函數的期待。\n// (所以它是在 server side 回應 request 時，已經會執行一次。去到了client side 又再做一次？)\n// ===> version 17後，componentWillMount()將會被改為UNSAFE_componentWillMount()。\n//一般我們對Mount系列函數的期待是「只執行一次」，不想重複執行的動作都會在這系列呼叫。\n// 所以我們改用 componentDidMount\n// 生命週期︰\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> componentDidMount()\n// #endregion \n// ****** class component 生命週期 ******︰\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> componentDidMount()\n// #region   2. 生命週期實作 componentDidMount\n// 詳見 App.js\n//root.render(<App dad=\"Chang\"/>);\n// #endregion   2\n// #region   3. fetch loading (在 fetch 拿到資料之前，不想元素的「空白」狀態被看見)\n// 以一個 state 來控制 「顯示」的狀態，如果沒有fetch到資料時，就掛個「Loading...」的牌\n// 詳見 App.js\n//root.render(<App dad=\"Chang\"/>);\n// 會等三秒才顯示小朋友的媽媽是誰。\n// #endregion 3\n// #region   4. (利用Js觸發)開場動畫\n//例如: 開場透過修改scrollTop做出scrollTo特效、使用別人提供的插件，而此插件只提供js上的api時\n//下面這個範例就是在componentDidMount呼叫自己寫的scrollTo函式，並透過setTimeout進行呼叫自己的recursive，以達成捲動動畫的效果\n// 詳見 App.js\n// root.render(<App dad=\"Chang\"/>);\n// Loading 期間，會慢慢滑到右邊\n// #endregion  4\n// #region   生命週期函數componentWill「Un」mount(移除)\n// Mount系列的函數就只會(在第一次render?)被執行一次，\n// 其中componentDidMount是所有生命週期函數中最常被使用到的。\n// 因為元件移除的生命週期函數componentWillUnmount(移除)很常跟componentDidMount(出生)一起使用，\n// 所以我們會先跳過「更新」的週期，直接來講(移除)。\n// #endregion \n// #region   5. componentWill「Un」mount的範例\n//root.render(<div><App/><div id='talk'></div></div>)\n// App 載入了 Baby，所以我開了個新檔\n// App 有個 State︰ isBorn\n//       兩個方法︰handleClick 和 sendBaby\n// handleClick 用來改 isBorn (bool)\n// sendBaby 在 isBorn=true 之下，用來回傳 baby\n// App render 了 一個 button ，一個 方法 sendBaby\n// 方法「可能不會回傳」這個 baby，要看 handleClick 改的 isBorn 是不是 true\n// Baby 有二個屬性，一個方法。\n// 屬性︰isGetData﹑Mom\n// 方法︰ajaxSimulator (取Mom的名字，延遲幾秒)\n// 當 App 的 sendBaby 要「生」的時候，\n// Baby 的 componentDidMount，會去抓媽媽，和叫一聲「爸」，顯示在 talk 的 div 中。\n// 抓到媽媽的值後，又render一次，於是又叫一聲「爸」。 <<<<--- 不，componentDidMount 的用意，就是為了避免這個。\n// componentDidMount 只有第一次 Render (出生的時候) ，才會做一次。之後修改 state 的 Render 都不會動到它。\n//  所以\n//  每次 Baby 生成的時候都做一次「Baby的componentDidMount，會去抓媽媽，和叫一聲「爸」」\n//  但是，如果沒有 Baby 的 componentWillUnmount 方法\n//  talk 的 div 是不停累加「爸」…\n//  證明 Baby 的 componentWillUnmount 是在 App 的 Render 時，\n//  決定了「收回」這個 baby 時，才進行一次\n// #endregion\n// 生命週期的官方解釋，非常清楚︰\n//https://zh-hant.reactjs.org/docs/react-component.html\n// Mounting : constructor() > static getDerivedStateFromProps() > render() > componentDidMount()\n// 更新State : static getDerivedStateFromProps() > shouldComponentUpdate() > render() > getSnapshotBeforeUpdate() > componentDidUpdate()\n// Unmounting : (該個別元素的) componentWillUnmount()\n// 更多相關請往官網上面看\n// 生命週期的流程圖︰\n//https://ithelp.ithome.com.tw/articles/10222857\n// #region   6. componentWill「Un」mount的補充︰ 移除監聽事件 及 setInterval\n// 移除監聽事件︰沿用上面 5 的例子，我加在 Baby 裡\n// setInterval 是什麼︰\n// https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/\n// 反正就都是一堆在 componentDidMount 做出的，都可在 componentWillUnmount 之中收回，當這個元素「消失」時。\n// #endregion 6\n// #region   7. 在state或props被改變時會觸發 : Update 的 生命流程\n// Update生命流程\n//1.static getDerivedStateFromProps()\n//2.shouldComponentUpdate()\n//3.render()\n//4.getSnapshotBeforeUpdate()\n//< -- 教材補充這裡是︰渲染畫面\n//5.componentDidUpdate()\n//    1.static getDerivedStateFromProps(props, state)\n//    跟mount中的那一個是一樣、共用的 (+ 注意是 static)\n//    「從props中取得state要設定的值」\n//    在這裡，參數的props和state是新入的。\n//    2.shouldComponentUpdate(nextProps, nextState)\n//    守門員，用來做確認是不是真的要update。\n//    這個函數要return一個 ++++ 布林值 +++++ !\n//    false時，元件就不會更新，也不會繼續執行接下來的render()以及剩下的update生命週期函數。\n//    預設回true\n//    (以上是用來卡驗證的嗎？)\n//    3.render 一樣，不解釋\n//    4.getSnapshotBeforeUpdate(prevProps, prevProps)\n//    離開我們前，拍張照片吧?\n//    「render()收集完要更新的東西」  跟  「React真的拿render()中的東西去更新DOM」 之間。\n//    它的用途是讓你可以把更新前的最後一刻DOM的狀況紀錄下來，\n//    然後用return值傳參數到componentDidUpdate中\n//    (所以是render和componentDidUpdate的中間人。)\n//    沒有要傳東西給componentDidUpdate，就要回傳null。\n//    this.props和this.state是更新之後的，\n//    舊的props和state在參數中以prevProps和prevProps存在。\n//    這個方法並不常見，\n//    但它可能會在像是對話串這類需要以某種特殊方始處理滾動軸位置的 UI 中出現。\n//    (這個功能就很酷！像是聊天室一樣，留言會一直自己往上跑，拉柄的位置一直留在最低！)\n//    #region 官方例子︰\n//    https://zh-hant.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate\n// class ScrollingList extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.listRef = React.createRef();\n//   }\n//   getSnapshotBeforeUpdate(prevProps, prevState) {       //<---這個輸入的，是舊(更新前)的，而不是新的！\n//     // Are we adding new items to the list?             // 如果列表變長了(高了)。\n//     // Capture the scroll position so we can adjust scroll later. \n//     if (prevProps.list.length < this.props.list.length) {\n//       const list = this.listRef.current;                // 抓「現在的(舊的)」 列表\n//       return list.scrollHeight - list.scrollTop;        // 傳回「現在(舊的)列表的長(高)度 - (舊的)拉柄的最高點」= 拉柄到地面的高度？\n//     }\n//     return null;\n//   }\n//   componentDidUpdate(prevProps, prevState, snapshot) {  //<--- 這裡接住了Snapshot (但是如果這裡也可以接prevProps, prevState)，\n//                                                         // 為什麼不在這裡做判斷？而是要從上面取值？\n//                                                         // 推測︰const list = this.listRef.current;\n//                                                         // 在這兩個方法，並不是同一個？上面的是指舊的那個？下面的是指新的那個？\n//     // If we have a snapshot value, we've just added new items.\n//     // Adjust scroll so these new items don't push the old ones out of view.\n//     // (snapshot here is the value returned from getSnapshotBeforeUpdate)\n//     if (snapshot !== null) {\n//       const list = this.listRef.current;\n//       list.scrollTop = list.scrollHeight - snapshot;    // (新的)列表的長(高)度 - (舊的)拉柄到地面的高度 = (新的)拉柄的最高點！\n//     }\n//   }\n//   render() {\n//     return (\n//       <div ref={this.listRef}>{/* ...contents... */}</div>\n//     );\n//   }\n// }\n//      #endregion\n//    4.5 渲染畫面\n//    5. componentDidUpdate(prevProps, prevState, snapshot)\n//    和componentDidMount一樣，\n//    這個函數被強烈建議把「更新後想做的事情」放在這裡，\n//    包括先前提過的fetch等。\n//    因為這個函數是唯一也是最後在DOM真的被更新後執行的週期函數。\n//    (回想componentDidMount放在render後，是因為確保取回來的結果，有地方放…未取到之前，也會有個Loading…在跑)\n//    所以 Mount 和 Update 的差別，是一個起始，一個是不斷更新中，\n//    Mount之中，還可以設定元素消失(死亡)時，會幹什麼…\n//    class component 的三大生命週期︰元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)\n// #endregion  7\n// ****** function component 的 生命週期 ****** :\n// #region  function component 初步介紹\n// 跟state一樣，在function component中我們必須要使用React hook才能設定生命週期函數。\n// React hook?\n// 在前面講生命週期時，我們提到最常被使用到的是\n// componentDidMount、componentWillUnmount和componentDidUpdate這三個函數，\n// 而React hook把這三者整合起來，變成了useEffect。\n// Hook 的官方簡介︰\n// https://zh-hant.reactjs.org/docs/hooks-intro.html\n// React hook兩大守則\n// 只能在最外層scope宣告(? where? 這個index.js就是最外層的scope了嗎？)\n// 只能在function component或custom hook(之後會說這是什麼)中使用\n// useEffect基本語法\n// useEffect接收兩個參數，\n// 第一個是一個函式，定義componentDidMount或componentDidUpdate要做什麼事，\n// 此函式的回傳值也要是一個函式，表示componentWillUnmount 要做什麼事。\n// 第二個是一個array，裡面是定義當哪些變數被改變時，這個useEffect要重新被觸發。\n// 有點像是過去我們在componentDidUpdate寫prevState!=this.state這種感覺。(<--What?算了，之後看實例)\n// 長得像(1)︰\n// useEffect(() => {\n\n/* 以此來相等如class component 的︰componentDidMount(已經render了Mount了，然後才去抓資料的動作…)(第一次上線)*/\n//}, []); \n\n/* 第二個參數是用來限定當哪些變數被改變時useEffect要觸發 */\n//componentWillUnmount就是useEffect第一個用來當參數的函式的return值。\n// 長得像(2)︰\n// useEffect(() => {\n//   /* 以此來相等如class component 的︰componentDidMount(已經render了Mount了，然後才去抓資料的動作…)(第一次上線)*/  \n//   return (() => { //<-----這個是重點！\n//   /* 以此來相等如class component 的︰componentWillUnmount (當這個元素消失的時候要做什麼)*/    \n//   });  \n// }, []); \n\n/* 第二個參數是用來限定當哪些變數被改變時useEffect要觸發 */\n//如果想要實現componentDidUpdate，\n//應該要搭配另外一個React hook: useRef。\n//也就是我們用useRef去產生一個紀錄:是否完成第一次渲染的變數，\n//初始值預設會給false，第一次執行effect後改為true。\n// 長得像(3)︰\n// const mounted=useRef(); //這個bool！是重點\n//     useEffect(()=>{\n//       if(mounted.current===false){ //第一次進來，預設為false\n//         mounted.current=true;\n//         /*以此來相等如class component 的︰componentDidMount*/   \n//       }\n//       else{ // (因為dependencies參數改變而觸發的︰)第二次開始，就跑進來這裡\n//         /*以此來相等如class component 的︰componentDidUpdate */\n//       }\n//       return (()=>{\n//         /*以此來相等如class component 的︰componentWillUnmount */\n//       })\n//     },[以此來相等如class component 的︰status屬性]); /* 第二個參數是用來限定當哪些變數被改變時useEffect要觸發 */\n//下面省略了第二個參數[]，也是componentDidMount 和 componentDidUpdate集合體:\n// 長得像(4)︰\n// useEffect(() => {\n//   /* componentDidMount 和  componentDidUpdate (每次都做，不分初或多次)*/\n//   return () => {\n//     /* componentWillUnmount */\n//   };\n// });\n// 其他︰\n// 可以有多個useEffect存在同一function component和custom hook中 ?\n// 所以我們可以針對不同的變數(?)去寫不同的useEffect。\n// #endregion  初步介紹\n// #region  function component 的實作，詳見 App2 和 Babay2\n//root.render(<div><App2/></div>)\n// #endregion\n// #region ****** Class component 的 傳值問題 ****** :\n// (我覺得這父子的關係，不是 extends ，因為 父子皆 extends Component\n// 父子的意思是 App 和 Baby 的關係，index 呼叫 App 呼叫 Baby …\n// index 給值 > App 給值 > Baby )\n// #region 父給子值，子改父值，又做成父改子值︰\n// (1)父給方法我 > 我修改了父給我的值 > (2)值的改變讓我的心情很好。\n// 實作︰詳見 Rich_Parent, Rich_Son, Rich_Daughter\n// root.render(<div><Rich_Parent/></div>)\n// (只要不斷求，爸爸就不斷給…所以是富爸爸)\n// #endregion\n// #region 同父的子類別之間︰子對子改值\n// 窮的爸爸只有100元，女兒吵，給她多一點，兒子就少一點\n// 女兒開心了，兒子就不開心。\n// 實作︰詳見 Poor_Parent, Poor_Son, Poor_Daughter\n// root.render(<div><Poor_Parent/></div>)\n// #endregion\n// #region 祖先對孫子 All In 的 方法一\n// 在這個狀況下，階層中間的「兒子」只是一個中繼站的感覺。\n// 就變成是多層父子溝通。\n// 但如果要傳的東西很多，每一層都要綁this.props.名稱會有點麻煩。\n// 方法一︰要運用 spread operator\n// 像︰<GrandSon {...this.props}/>\n// 把Son所有的props全部綁在GrandSon上\n// 詳見自創的實作︰GrandPa.js\n// root.render(<GrandPa/>);\n// #endregion\n// #region 祖先對孫子 All In 的 方法二︰不用綁全部props、又更簡易的方法?(不用其他插件)\n// 運用Bracket notation(以中括號存取物件)\n// 在父元素中，定義兩個函式\n// 1.存取資料用: 接收一個名字參數，來取回相應名字的參數。\n// handleSendData(name){\n//   return this.props[name];\n// }\n// 2.存取函式用: 接收兩個參數，第一個是函式名稱，第二個是函式要用的參數array。\n// handleSendFunc(method, ...arg){\n//   return this.props[method](...arg);  //<---這個做不到，詳見︰GrandPaPa\n// } //(...arg)是一個真的可以寫的程式碼嗎？\n// 把這兩個函式綁在所有中繼站上(目標子元素也要綁)，\n// 在這個案例中繼站只有一個，所以只要綁目標(孫)子元素。\n// 像︰\n// <GrandSon \n// handleSendData={this.handleSendData} \n// handleSendFunc={this.handleSendFunc} />\n// 目標(孫)子元素呼叫這兩個函式︰\n\n/* 存取綁在Brother.js上的money */\n// let dadMoney=this.handleSendData(\"money\"); // 取父的 money 元素\n// 詳見︰\n//root.render(<GrandPaPa/>);\n// 類似︰\n\n/* 呼叫綁在Brother上的argue函式(allocateMoney)。\n「brother」和「5」是原本allocateMoney規定需要的參數。 */\n// this.handleSendFunc(\"argue\",\"brother\",5);  // 使用父的argue方法，傳入參數\"brother\",5。\n// #endregion\n// #region Global state \n// 由於祖先對某代孫子的溝通的情形很常發生，因此後來衍生了產生Global state的官方或第三方插件\n// 其中之一，可參考︰\n// https://ithelp.ithome.com.tw/articles/10216471\n// 也打開來看看吧…\n// #endregion\n// #region (大補充)在官網上，很好解釋Component的例子(私認為比以上的教材更清楚)︰\n// 多層傳值的使用例子︰\n// https://zh-hant.reactjs.org/docs/components-and-props.html\n// 這個例子中，好像把資料打包成「物件」來分別「傳承」會更好。\n// 一個爸爸有多個兒子，每個兒子都給他們不同的物件…兒子再給孫子。\n// 但是如何打包成物件? 請參照 state 的寫法。\n// function tick() {\n//   const element = (\n//     <div>\n//       <h1>Hello, world!</h1>\n//       <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//     </div>\n//   );\n//   root.render(element);\n// }\n// setInterval(tick, 1000); // 這個方法，是會自己計時，並一直執行的。\n// 將 element 抽出為一個 function component \n// 傳一個物件，再取出其屬性。\n// function Clock(props) {\n//   return (\n//     <div>\n//       <h1>Hello, world!</h1>\n//       <h2>It is {props.date.toLocaleTimeString()}.</h2> \n//     </div>\n//   );\n// }\n// function tick() {\n//   root.render(<Clock date={new Date()} />);\n// }\n// setInterval(tick, 1000);\n// 理想情況下，我們想要撰寫一次 Clock 並且它會自己更新：\n// root.render(<Clock />);\n// 你可以透過以下 5 個步驟轉換一個 function component 像是 Clock 成為 class：\n// 建立一個相同名稱並且繼承 React.Component 的 ES6 class。\n// 加入一個 render() 的空方法。\n// 將 function 的內容搬到 render() 方法。\n// 將 render() 內的 props 替換成 this.props。\n// 刪除剩下空的 function 宣告。\n// class Clock extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello, world!</h1>\n//         <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n//       </div>\n//     );\n//   }\n// }\n//加入 Local State 到 Class\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()}; // 咦，State的寫法，就是物件的寫法…\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello, world!</h1>\n//         <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n//       </div>\n//     );\n//   }\n// }\n// root.render(<Clock />)\n// 但是這個還是不會跳。\n//每當 Clock render 到 DOM 的時候，我們想要設定一個 timer。在 React 中稱為「mount」。\n//每當產生的 Clock DOM 被移除時，我們想要清除 timer。在 React 中稱為「unmount」。\n\nclass Clock extends React.Component {\n  // 正確的使用 State 用 this.setState\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  } // 錯誤 : 不會引發更新\n  // this.state.comment = 'Hello';\n\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), // 這個 方法，在掛上的時候，就設定它一秒更新一次。\n    1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID); // timerID這屬性，只是為了進行一個方法？\n  } // 如果 Clock component 從 DOM 被移除了，React 會呼叫 componentWillUnmount() 生命週期方法，所以 timer 會被停止。\n  // 但這裡還沒用到就是了。\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    }; // 咦，State的寫法，就是物件的寫法…\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello, world!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"It is \", this.state.date.toLocaleTimeString(), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1136,\n      columnNumber: 7\n    }, this);\n  }\n\n} //root.render(<Clock />)\n//每當 Clock 輸出被插入到 DOM 時，\n//React 會呼叫 componentDidMount() 生命週期方法。\n//在 Clock component 生命週期方法內，會要求瀏覽器設定 timer 每秒去呼叫 component 的 tick() 方法。\n//瀏覽器每秒呼叫 tick() 方法。\n//其中，Clock component 透過包含目前時間的 object 呼叫 setState() 來調度 UI 更新。\n//感謝 setState()，React 現在知道 state 有所改變，\n//並且再一次呼叫 render() 方法來了解哪些內容該呈現在螢幕上。\n//這時候，在 render() 方法內的 this.state.date 將會有所不同，\n//因此 render 輸出將會是更新的時間。React 相應地更新 DOM。\n//https://zh-hant.reactjs.org/docs/state-and-lifecycle.html\n// React 可以將多個 setState() 呼叫批次處理為單一的更新，以提高效能。\n// 因為 this.props 和 this.state 可能是非同步的被更新，你不應該依賴它們的值來計算新的 state。\n// 例如，這個程式碼可能無法更新 counter：\n// this.setState({ // 錯誤\n//   counter: this.state.counter + this.props.increment,\n// });\n// 使用第二種形式的 setState()，\n// 它是一個 function 而不是一個 object。\n// Function 將接收先前的 state 作為第一個參數，並且將更新的 props 作為第二個參數：\n// 正確\n// this.setState((state, props) => ({\n//   counter: state.counter + props.increment\n// }));\n// -------(or)---------\n// this.setState(function(state, props) {\n//   return {\n//     counter: state.counter + props.increment\n//   };\n// });\n// (先接了再做 update，那就肯定那個值還在，還沒被刪除之類的意思？)\n//#region 向下資料流\n//Parent 和 child 不會知道某個 component 是 stateful 或 stateless 的 component，\n//也不在意它是透過 function 或是 class 被定義的。\n//這就是 state 通常被稱為 local state 或被封裝的原因。\n//除了擁有和可以設定它之外的任何 component 都不能訪問它。\n//FormattedDate component 會在它的 props 接收到 date，\n//但他不知道它是從 Clock 的 state 傳遞過來的，\n//從 Clock 的 props 或者是透過手動輸入：\n\n\nfunction FormattedDate(props) {\n  return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: [\"It is \", props.date.toLocaleTimeString(), \".\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1192,\n    columnNumber: 10\n  }, this);\n} //想像一個 component tree 是一個 props 的瀑布，\n//每個 component 的 state 像是一個額外的水流源頭，\n//它在任意的某個地方而且往下流。\n//例證\n\n\n_c = FormattedDate;\n\nclass Clock2 extends React.Component {\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello, world!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"It is \", this.state.date.toLocaleTimeString(), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1220,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Clock3 extends React.Component {\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello, world!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"It is \", this.state.date.toLocaleTimeString(), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1248,\n      columnNumber: 7\n    }, this);\n  }\n\n} //root.render(<div><Clock /><Clock2 /><Clock3 /></div>)\n// 這三個時鐘各自在動，每個方法有自己的 render 和 return\n// 證明各自己的 state 是各不相關的，資料是向下流的，state 它是 local state \n//#endregion\n// 事件處理，是官網教材的下一章，但是已經離開「傳值」的主題太遠了，所以我晚點再看。\n// https://zh-hant.reactjs.org/docs/handling-events.html\n// #endregion\n\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"FormattedDate\");","map":{"version":3,"names":["React","ReactDOM","scryRenderedDOMComponentsWithClass","reportWebVitals","App","App2","Rich_Parent","Poor_Parent","GrandPa","GrandPaPa","root","createRoot","document","getElementById","Clock","Component","tick","setState","date","Date","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","constructor","props","state","render","toLocaleTimeString","FormattedDate","Clock2","Clock3"],"sources":["C:/Users/User/source/repos/Learning/React/hello-world/src/index.js"],"sourcesContent":["/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nimport App from './App';\nimport App2 from './App2';\n\nimport Rich_Parent from './Rich_Parent';\nimport Poor_Parent from './Poor_Parent';\n\n//import {GrandPa,Son,GrandSon} from './GrandPa';\nimport GrandPa from './GrandPa';\nimport GrandPaPa from './GrandPaPa';\n\n// Debug 用的?\n//import * as serviceWorker from './serviceWorker'; \n\n// 這個是教材沒寫到的，新(2022?)的指(綁)定 index.html 元素的方法︰\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') // index.html的DOM\n); // 或 createElement ？這個還沒有教到。\n\n// JSX 語法\n\n// #region  1. Hello world! 將 DOM 元素，render 進 index.html\n\n// const element = <h1>Hello world!!!!!</h1>;\n// root.render(element);\n\n// #endregion 1\n\n// #region  2. 同上\n\n// const element = <button>大家好</button>\n// root.render(element);\n\n// #endregion 2\n\n// #region  3. 傳入方法 ()=>\n\n// const element =()=>{\n//   return( <button>大家好</button> );\n// }\n// root.render(element());\n\n// #endregion 3\n\n// #region  4. 傳入方法 ()=> 只能 return 一個元素\n\n// const testFunction =()=> {\n//   return( \n//       <div> \n//           <button> 大家好 </button>\n//           <h1> 我很好 </h1>\n//       </div>\n//   );\n// }\n// // 一定要加 div 將兩個 DOM 包成一個。\n// root.render(testFunction());\n\n// #endregion\n\n// #region  5. 在JSX中需要用到javascript的變數/函式...時，就要用{}包起來\n\n// const showOne = true;\n// root.render(\n//     <h1> { (showOne === true) ? 1 : 0 } </h1>\n// );\n\n//#endregion 5\n\n// #region  6. 設定字串 > 字串中，放入字串{}\n\n// 字串中，放入字串{}\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// root.render(\n//   <h1 style = { styleArgument } > Hello, world! </h1>\n// );\n\n//  #endregion  6\n\n// #region  6.5. 反正記得 style = {{}}\n\n// HTML之中放入字串？\n// const styleArgument = { fontSize: '100px', color: 'red' };\n// const element = <h1 style = { styleArgument } > Hello, world! </h1>;\n// root.render(element);\n\n// {{}} : 在HTML之中，表示\"\"指定屬性的字串？ X 下方用來指定class的也不是這樣…\n// 外面那層括號代表裡面是javascript語法，裡面的括號表示物件型態 <- 還是看不懂\n// 反正記得 style = {{}}\n// const element = <h1 style = { { fontSize: '100px', color: 'red' } } > Hello, world! </h1>;\n// root.render(element);\n\n// #endregion 6.5\n\n// #region  7. 設定 DOM 屬性時 「class」屬性變成「className」\n\n// const element = <h1 className = \"title\" > Hello, world! </h1>\n// root.render(element);\n\n// #endregion 7\n\n// #region  8. 透過JSX結合javascript運算式\n\n// 例子︰迴圈\n\n// const multiButton=()=>{\n//   var output=[];\n\n//   for(let i=0;i<4;++i)\n//       output.push(<button>我是第{i+1}個按鍵</button>)\n\n//   return output;\n// }\n\n// root.render(multiButton());\n\n// #endregion 8\n\n// #region  9. 屬性給布林值，true的話，可直接省略。(最終都會render成true)\n\n// 死記 value 是 {}，style 是 {{}} ???\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value={true} > 是 </button>\n//           <br/>\n//           <button value > 是 </button>\n//     </div>\n//   );\n// }\n// root.render(element());\n\n// #endregion 9\n\n// #region  10. onClick , C要大寫。和value一樣要 = {}\n\n// onChange 同理，因為JSX都是駝峰字。\n// 方法所收的都是event，event.target就是該呼叫的元素…\n\n// const getValue=(event)=>{\n//   console.log(event.target.value)\n//   alert(event.target.value);\n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={getValue}> 是(value=true) </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// #endregion 10\n\n// #region  11. 箭頭函式 包入多個 function\n\n// const myFunction1=(event)=>{ // event可略\n//   console.log(\"F1\");\n//   alert(\"F1\");\n// }\n\n// const myFunction2=(event)=>{\n//   //alert(event.target.value); // 小心，(e)=> 根本沒有event的傳入\n//   console.log(\"F2\");\n//   alert(\"F2\");\n\n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1();myFunction2()}}> 是 </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// 在瀏覽器的F12看不到元素上依附的onclick方法，但做還是會做…\n// React這樣做，比較沒有那麼容易給「使用者」看穿﹑亂改﹑找漏洞?\n// 還比較好去編輯？(我想是優點吧。)\n\n// 箭頭函式 : 想傳什麼參數、使用幾個函式、做什麼運算都可以。缺點是很容易讓版面看起來很亂。\n\n// #endregion  11\n\n// #region  11.5  另一個傳入值，而不是傳入 event 的方法\n\n// const myFunction1=(val)=>{\n//   console.log(val);\n//   alert(val);\n// }\n\n// const element = () =>\n// {\n//   return(\n//     <div>\n//           <button value onClick={(e)=>{ myFunction1(e.target.value);}}> 是 </button>\n//     </div>\n//   );\n// }\n\n// root.render(element());\n\n// 在JSX綁定js資料、函式時，一定要加上{}\n// 剛開始很容易照以前的習慣直接用屬性=\"綁上去的東西\"\n// 這樣的話等同於在傳字串。\n\n// #endregion 11.5\n\n// #region  React Component (自訂元素) 簡介\n\n// 這個語法讓我們可以把程式碼以函式(或是class，後面會提到)包成模組，\n// 變成一個自己訂作的元素，\n// 然後用跟使用button、div這些元素一樣的語法在JSX中使用\n\n// 元素名稱第一個字母必須要是大寫、和函式(或class)名稱相同\n\n// #endregion\n\n// #region  1. (Funtion Component)簡單例子\n\n// function App(){\n//   return(\n//     <button>大家好</button>\n//   );\n// }\n\n// root.render( <div> <App/> </div> );\n\n// #endregion 1\n\n// #region  2. 於 render 可重覆使用\n\n// function Progress(){\n//   const barWidth=\"50%\";\n//   return(\n//       <div>\n//           <div className=\"progress-back\" style={{backgroundColor:\"rgba(0,0,0,0.2)\",width:\"200px\",height:\"7px\",borderRadius:\"10px\"}}>\n//           <div className=\"progress-bar\" style={{backgroundColor:\"#fe5196\",width:barWidth,height:\"100%\",borderRadius:\"10px\"}}></div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// root.render(\n//       <Progress/>\n//       <Progress/>\n// );\n\n// #endregion 2.\n\n// #region  3. 從鄰檔引用自訂元素\n\n// 上方要︰import App from './App';\n// 意思是指將隔壁 App.js 的 App 方法引用進來。供下方使用\n//root.render(<App/>);\n\n// #endregion 3\n\n// props = 自訂元素 中的 自訂Attribute\n// 「也」要去改 App.js 這個檔案\n\n// #region  1. 主檔(index.js)和附檔(App.js)之間的傳值 \n\n// root.render(<div><App name='大家好'/></div>);\n\n// #endregion 1\n\n// #region  傳接資料的型別問題\n// 文字''/\"\"\n//root.render(<div><App number=\"87\" getData=\"true\"/></div>);\n// 其他型別 {}\n//root.render(<div><App number={87} getData={true}/></div>);\n\n// 使用變數? props是唯讀\n// 他說︰有的時候我們就是想要在元件自己這更改props，這個時候就要用比較迂迴的做法。在後面講...\n\n// #endregion\n\n// #region  2. 將onClick會做的事，傳到寫好的自訂元件\n\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div> \n// );\n\n// #endregion\n\n// #region  3. 在react component中，我們把包在標籤中間的東西，稱為children。\n\n// <元素名稱> (其他的東西) </元素名稱>\n//  (其他的東西) = children\n\n// root.render(<div><App> children </App></div>);\n\n// 不同的children間能互相影響，和一個叫state的東東有關係，但作者還是說之後再……\n\n// #endregion\n\n// ------------------\n// component = 自訂元素\n// Function component 為上述 (直接在這個檔)\n// class component 為下述 (從外檔引入)\n// https://zh-hant.reactjs.org/docs/components-and-props.html\n// ------------------\n\n// #region   1. 使用render方法\n\n//root.render(<App/>);\n\n// #endregion 1\n\n// #region   2. 傳 props 值\n// const printMessage=()=>{\n//   document.getElementById('show-area').innerHTML=\"我被按到了\";\n// }\n\n// root.render(\n//     <div>\n//         <App name=\"我的名字\" handleClick={printMessage}/> \n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n\n//#endregion 2\n\n// #region   3. 會跑，但是不會有改變，只會看到 log 中的 hey\n\n// const changeName=(newName)=>{ \n//   name=newName;\n//   console.log(\"hey\")//加入此行\n// }\n\n// var name=\"舊的名字\";\n\n// root.render(\n//     <div>\n//         <App name={name} handleClick={changeName}/> \n//         {/* 就算是 changeName(\"新的名字\") 也傳不入參數，程式會死，連log都不寫 */}\n//         <div id=\"show-area\"></div>\n//     </div>\n// );\n\n// #endregion 3\n\n// #region   4. 用 class 自己本身的方法去改值，而不是用index.jx傳入的參數來改值\n\n// 詳見 App.js\n// root.render(\n//     <div>\n//         <App/> \n//     </div>\n// );\n\n//  #endregion 4\n\n// #region   5. 多一個進度條的練習\n\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n\n//#endregion 5\n\n// #region   6. state 的特性\n\n// 詳見App.js\n\n// root.render(\n//     <div>\n//       <br/>\n//       <br/>\n//         <App/> \n//     </div>\n// );\n\n//#endregion  6\n\n// ( 回到 function component )  \n\n// #region   1. useState   \n\n// React hook出現了，\n// 它提供一系列讓你能在function component中使用「在class component常用的功能」的方法，\n// useState就是其中之一。\n\n// const [percent, changePercent] = useState(\"20%\");\n\n// 我們宣告了一個變數和一個函式，第一個percent是變數\n// 而第二個 changePercent 變成了等同於 (值)=>{this.setState({percent:值})}\n// 函式在語法上沒有限定命名原則，但一般會以 set 做為開頭 ( changePercent 該為 setPercent )\n\n// const [percent, changePercent] = ....，是利用javascript的解構賦值\n// useState只是一個函式，它會接收一作為初始值的參數 並回傳一個包含兩個值的array，\n// 回傳︰第一個值是 state 、 第二個值是用來對剛那個 state 做 setState 的函式\n\n// 實作詳見︰ App.js\n\n//root.render(<div><br/><br/><App/></div>);\n\n// #endregion 1 \n\n// #region useState(和其他的React hook) 的特質\n\n// 不能在function component中的迴圈、if-else、nest function\n// (在function scope中宣告的function)被定義使用\n\n// 對useState而言，它是依照(render的)順序去分辨每一個hook，\n// 而不是用我們的定義內容/來接的變數的名字去分辨\n\n// 所以 re-render 的時候…如果有迴圈什麼的，就會全亂了。\n\n//  總結︰ function component 的 useState 是比較簡潔\n//          但功能是真的不多，和 class component 對比。\n\n// #endregion\n\n// #region   2. debug : React-Developer-Tools\n\n// 當專案規模到一定程度的時候，\n// state、props和函式會變的很多，debug上越來越困難。\n// 這時我們就會用到一款在chrome上協助開發者debug的插件:React-Developer-Tools。\n\n// 引入︰import * as serviceWorker from './serviceWorker'；\n\n// root.render\n// (    \n// <div>\n//   <br/>\n//   <br/>\n//   <App name=\"我是進度條\">在index.js中轉換百分比</App>\n// </div>\n// );\n\n// 在 chrome 線上應用程式商店，安裝 React-Developer-Tools\n// 可以在 More 之中，看出有什麼 Component ，還可以自由輸入 attribute 的值，即時看到效果。\n// 眼睛可以顯示位置\n// 當你在component點擊該元件後，回到console，輸入$r，就會跳出和此元件相關屬性，讓你可以選擇並搭配console做一些監控、模擬事件等等常見的debug方式。\n\n// #endregion\n\n// #region 使用 Http request - Fetch Api\n\n// 因為jQuery運作模式/渲染DOM的方式和React不太一樣，\n// 為避免發生衝突，一般「不會希望」在React中使用jQuery\n\n// Fetch Api是內建於JavaScript web api的一部份。使用時，不需要額外下載或嵌入CDN。\n// Fetch是一個Promise\n\n//    #region 基本架構︰\n\n// fetch( request的url, { /*設定request內容*/})\n//     .then(res => res.json()) /*把request json化*/\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n\n//    #endregion \n\n//    #region 使用GET︰\n\n// fetch( request的url, {method: \"GET\"}) /*設定使用GET*/\n//     .then(res => res.json()) \n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n\n//    #endregion\n\n//    #region 加上headers (Content Type)\n\n// fetch( request的url, {  method: \"GET\", headers: new Headers({ 'Content-Type': 'application/json',})   }\n// )\n// .then(res => res.json())\n// .then(data => {\n//     /*接到request data後要做的事情*/\n// })\n// .catch(e => {\n//   /*發生錯誤時要做的事情*/\n// })\n\n//    #endregion\n\n//    #region 加上headers (token)\n\n// const token = \"Bearer \"+ 我存好的token ;\n\n// fetch( request的url, {\n//         method: \"GET\",\n//         headers: new Headers({\n//             'Content-Type': 'application/json',\n//             'Authorization': token, /* 把token放在這 */\n//         })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n// )\n\n//    #endregion \n\n//    #region 加上body (JSON type)\n\n// const data= { A:\"資料A\", B:\"資料B\" }\n\n// fetch( request的url, {\n//         method: \"GET\",\n//         body: JSON.stringify(data),   /*<<<<<把json資料字串化*/\n//         headers: new Headers({\n//             'Content-Type': 'application/json'\n//         })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//           /*接到request data後要做的事情*/\n//     })\n//     .catch(e => {\n//         /*發生錯誤時要做的事情*/\n//     })\n\n//    #endregion\n\n//    #region 加上body (x-www-form-urlencoded type) 沒有用過…？\n\n// 資料處理\n// const data= { A:\"資料A\", B:\"資料B\" };\n// const formData = Object.keys(data).map(\n//     function (keyName) {\n//         return encodeURIComponent(keyName) + '=' + encodeURIComponent(data[keyName])\n//     }\n// ).join('&');\n\n// 使用\n// fetch( request的url, {\n//   method: \"GET\",\n//   body: formData,   /* <<<<< 使用處理後的資料*/\n//   headers: new Headers({\n//       \"Content-type\": \"application/x-www-form-urlencoded\"\n//   })\n// })\n// .then(res => res.json())\n// .then(data => {\n//     /*接到request data後要做的事情*/\n// })\n// .catch(e => {\n//   /*發生錯誤時要做的事情*/\n// })\n\n//    #endregion \n\n// #endregion Fetch 理論\n\n// #region   1. 實作 Fetch\n\n// 詳見 App.js\n\n//root.render(<App/>)\n\n// #endregion 1\n\n// #region   class component 生命週期\n\n//元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)\n\n//元件被安裝時(Mount) :\n//constructor() -> componentWillMount() -> render() -> 渲染DOM ->......(渲染後的生命週期)\n\n// version 17後，componentWillMount()將會被改為UNSAFE_componentWillMount()\n// 我自己CMD :　npm view react version  結果︰ 18.2.0 ，以Ver.16.3誕生的新週期函數static getDerivedStateFromProps()來代替。\n\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> ......(渲染後的生命週期)\n\n// 中間的這一步長這樣︰\n// static getDerivedStateFromProps(props,state){\n//   if(props.dad!==\"Chang\")\n//     return {isRightDad:false}\n// }\n\n// 這個函數最常使用的狀況是「用初始接收到的props」\n// 去設定第一次render時的state或是做其他的事情。\n\n// 這個函數是static，也就是this不能在這裡使用\n//(static指的是這函式不屬於以這個class被宣告出來的(單一個)物件，而是泛屬於此class類別的所有物件)。\n\n// 所以我們不能在getDerivedStateFromProps呼叫 「this」.setState !!! \n// 更改state的方法是用預寫好的規則 : 以這個函式的return值來設定\n\n\n\n// #endregion 1\n\n// #region   1. 生命週期實作 getDerivedStateFromProps\n\n// 詳見 App.js\n\n//root.render(<App dad=\"Chang\"/>);\n\n// #endregion 1\n\n// #region   補上，承下\n\n// 要注意的是，我們不希望在getDerivedStateFromProps()中做宣告/初始化的動作，\n// 如果可以的話就在constructor中做，\n\n// 其他如fetch或是動畫等，應該移到下一篇要講的componentDidMount()中來做。\n\n// #endregion  \n\n// #region   componentWillMount -> componentDidMount\n\n// componentWillMount(){\n//   if(this.props.dad!==\"Chang\")\n//     this.setState({isRightDad:false})\n// }\n\n//過去除了getDerivedStateFromProps()的功能外，\n//很多人會在這裡執行fetch以取得想在render()中使用的資料。<<<---這個是生命週期的重點。\n//例如token的檢查等等。(?)\n//然而官方表示，\n//如果在componentWillMount()這執行fetch，並不會等response進來才執行render。\n//又因為這是唯一會在 *server side (見註解)執行的生命週期函數，\n//導致它在server side和client side都會執行一次，\n\n//「重複執行」這件事並不符合我們對Mount週期函數的期待。\n// (所以它是在 server side 回應 request 時，已經會執行一次。去到了client side 又再做一次？)\n// ===> version 17後，componentWillMount()將會被改為UNSAFE_componentWillMount()。\n\n//一般我們對Mount系列函數的期待是「只執行一次」，不想重複執行的動作都會在這系列呼叫。\n// 所以我們改用 componentDidMount\n\n// 生命週期︰\n\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> componentDidMount()\n\n// #endregion \n\n// ****** class component 生命週期 ******︰\n//constructor() -> static getDerivedStateFromProps() -> render() -> 渲染DOM -> componentDidMount()\n\n// #region   2. 生命週期實作 componentDidMount\n\n// 詳見 App.js\n//root.render(<App dad=\"Chang\"/>);\n\n// #endregion   2\n\n// #region   3. fetch loading (在 fetch 拿到資料之前，不想元素的「空白」狀態被看見)\n\n// 以一個 state 來控制 「顯示」的狀態，如果沒有fetch到資料時，就掛個「Loading...」的牌\n\n// 詳見 App.js\n//root.render(<App dad=\"Chang\"/>);\n\n// 會等三秒才顯示小朋友的媽媽是誰。\n\n// #endregion 3\n\n// #region   4. (利用Js觸發)開場動畫\n\n//例如: 開場透過修改scrollTop做出scrollTo特效、使用別人提供的插件，而此插件只提供js上的api時\n//下面這個範例就是在componentDidMount呼叫自己寫的scrollTo函式，並透過setTimeout進行呼叫自己的recursive，以達成捲動動畫的效果\n\n// 詳見 App.js\n// root.render(<App dad=\"Chang\"/>);\n\n// Loading 期間，會慢慢滑到右邊\n\n// #endregion  4\n\n// #region   生命週期函數componentWill「Un」mount(移除)\n\n// Mount系列的函數就只會(在第一次render?)被執行一次，\n// 其中componentDidMount是所有生命週期函數中最常被使用到的。\n\n// 因為元件移除的生命週期函數componentWillUnmount(移除)很常跟componentDidMount(出生)一起使用，\n// 所以我們會先跳過「更新」的週期，直接來講(移除)。\n\n// #endregion \n\n// #region   5. componentWill「Un」mount的範例\n\n//root.render(<div><App/><div id='talk'></div></div>)\n\n// App 載入了 Baby，所以我開了個新檔\n// App 有個 State︰ isBorn\n//       兩個方法︰handleClick 和 sendBaby\n// handleClick 用來改 isBorn (bool)\n// sendBaby 在 isBorn=true 之下，用來回傳 baby\n\n// App render 了 一個 button ，一個 方法 sendBaby\n// 方法「可能不會回傳」這個 baby，要看 handleClick 改的 isBorn 是不是 true\n\n// Baby 有二個屬性，一個方法。\n// 屬性︰isGetData﹑Mom\n// 方法︰ajaxSimulator (取Mom的名字，延遲幾秒)\n\n// 當 App 的 sendBaby 要「生」的時候，\n// Baby 的 componentDidMount，會去抓媽媽，和叫一聲「爸」，顯示在 talk 的 div 中。\n// 抓到媽媽的值後，又render一次，於是又叫一聲「爸」。 <<<<--- 不，componentDidMount 的用意，就是為了避免這個。\n// componentDidMount 只有第一次 Render (出生的時候) ，才會做一次。之後修改 state 的 Render 都不會動到它。\n\n//  所以\n//  每次 Baby 生成的時候都做一次「Baby的componentDidMount，會去抓媽媽，和叫一聲「爸」」\n\n//  但是，如果沒有 Baby 的 componentWillUnmount 方法\n//  talk 的 div 是不停累加「爸」…\n\n//  證明 Baby 的 componentWillUnmount 是在 App 的 Render 時，\n//  決定了「收回」這個 baby 時，才進行一次\n\n// #endregion\n\n// 生命週期的官方解釋，非常清楚︰\n//https://zh-hant.reactjs.org/docs/react-component.html\n\n// Mounting : constructor() > static getDerivedStateFromProps() > render() > componentDidMount()\n// 更新State : static getDerivedStateFromProps() > shouldComponentUpdate() > render() > getSnapshotBeforeUpdate() > componentDidUpdate()\n// Unmounting : (該個別元素的) componentWillUnmount()\n\n// 更多相關請往官網上面看\n// 生命週期的流程圖︰\n//https://ithelp.ithome.com.tw/articles/10222857\n\n// #region   6. componentWill「Un」mount的補充︰ 移除監聽事件 及 setInterval\n\n// 移除監聽事件︰沿用上面 5 的例子，我加在 Baby 裡\n\n// setInterval 是什麼︰\n// https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/\n\n// 反正就都是一堆在 componentDidMount 做出的，都可在 componentWillUnmount 之中收回，當這個元素「消失」時。\n\n// #endregion 6\n\n// #region   7. 在state或props被改變時會觸發 : Update 的 生命流程\n\n// Update生命流程\n//1.static getDerivedStateFromProps()\n//2.shouldComponentUpdate()\n//3.render()\n//4.getSnapshotBeforeUpdate()\n//< -- 教材補充這裡是︰渲染畫面\n//5.componentDidUpdate()\n\n//    1.static getDerivedStateFromProps(props, state)\n//    跟mount中的那一個是一樣、共用的 (+ 注意是 static)\n//    「從props中取得state要設定的值」\n//    在這裡，參數的props和state是新入的。\n\n//    2.shouldComponentUpdate(nextProps, nextState)\n//    守門員，用來做確認是不是真的要update。\n//    這個函數要return一個 ++++ 布林值 +++++ !\n//    false時，元件就不會更新，也不會繼續執行接下來的render()以及剩下的update生命週期函數。\n//    預設回true\n//    (以上是用來卡驗證的嗎？)\n\n//    3.render 一樣，不解釋\n\n//    4.getSnapshotBeforeUpdate(prevProps, prevProps)\n\n//    離開我們前，拍張照片吧?\n//    「render()收集完要更新的東西」  跟  「React真的拿render()中的東西去更新DOM」 之間。\n//    它的用途是讓你可以把更新前的最後一刻DOM的狀況紀錄下來，\n//    然後用return值傳參數到componentDidUpdate中\n\n//    (所以是render和componentDidUpdate的中間人。)\n//    沒有要傳東西給componentDidUpdate，就要回傳null。\n\n//    this.props和this.state是更新之後的，\n//    舊的props和state在參數中以prevProps和prevProps存在。\n//    這個方法並不常見，\n//    但它可能會在像是對話串這類需要以某種特殊方始處理滾動軸位置的 UI 中出現。\n\n//    (這個功能就很酷！像是聊天室一樣，留言會一直自己往上跑，拉柄的位置一直留在最低！)\n\n//    #region 官方例子︰\n//    https://zh-hant.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate\n\n// class ScrollingList extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.listRef = React.createRef();\n//   }\n\n//   getSnapshotBeforeUpdate(prevProps, prevState) {       //<---這個輸入的，是舊(更新前)的，而不是新的！\n//     // Are we adding new items to the list?             // 如果列表變長了(高了)。\n//     // Capture the scroll position so we can adjust scroll later. \n//     if (prevProps.list.length < this.props.list.length) {\n//       const list = this.listRef.current;                // 抓「現在的(舊的)」 列表\n//       return list.scrollHeight - list.scrollTop;        // 傳回「現在(舊的)列表的長(高)度 - (舊的)拉柄的最高點」= 拉柄到地面的高度？\n//     }\n//     return null;\n//   }\n\n//   componentDidUpdate(prevProps, prevState, snapshot) {  //<--- 這裡接住了Snapshot (但是如果這裡也可以接prevProps, prevState)，\n//                                                         // 為什麼不在這裡做判斷？而是要從上面取值？\n//                                                         // 推測︰const list = this.listRef.current;\n//                                                         // 在這兩個方法，並不是同一個？上面的是指舊的那個？下面的是指新的那個？\n//     // If we have a snapshot value, we've just added new items.\n//     // Adjust scroll so these new items don't push the old ones out of view.\n//     // (snapshot here is the value returned from getSnapshotBeforeUpdate)\n//     if (snapshot !== null) {\n//       const list = this.listRef.current;\n//       list.scrollTop = list.scrollHeight - snapshot;    // (新的)列表的長(高)度 - (舊的)拉柄到地面的高度 = (新的)拉柄的最高點！\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div ref={this.listRef}>{/* ...contents... */}</div>\n//     );\n//   }\n// }\n\n\n//      #endregion\n\n//    4.5 渲染畫面\n\n//    5. componentDidUpdate(prevProps, prevState, snapshot)\n//    和componentDidMount一樣，\n//    這個函數被強烈建議把「更新後想做的事情」放在這裡，\n//    包括先前提過的fetch等。\n//    因為這個函數是唯一也是最後在DOM真的被更新後執行的週期函數。\n//    (回想componentDidMount放在render後，是因為確保取回來的結果，有地方放…未取到之前，也會有個Loading…在跑)\n\n//    所以 Mount 和 Update 的差別，是一個起始，一個是不斷更新中，\n//    Mount之中，還可以設定元素消失(死亡)時，會幹什麼…\n//    class component 的三大生命週期︰元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)\n\n// #endregion  7\n\n// ****** function component 的 生命週期 ****** :\n\n// #region  function component 初步介紹\n\n// 跟state一樣，在function component中我們必須要使用React hook才能設定生命週期函數。\n// React hook?\n\n// 在前面講生命週期時，我們提到最常被使用到的是\n// componentDidMount、componentWillUnmount和componentDidUpdate這三個函數，\n// 而React hook把這三者整合起來，變成了useEffect。\n// Hook 的官方簡介︰\n// https://zh-hant.reactjs.org/docs/hooks-intro.html\n\n// React hook兩大守則\n// 只能在最外層scope宣告(? where? 這個index.js就是最外層的scope了嗎？)\n// 只能在function component或custom hook(之後會說這是什麼)中使用\n\n// useEffect基本語法\n// useEffect接收兩個參數，\n\n// 第一個是一個函式，定義componentDidMount或componentDidUpdate要做什麼事，\n// 此函式的回傳值也要是一個函式，表示componentWillUnmount 要做什麼事。\n\n// 第二個是一個array，裡面是定義當哪些變數被改變時，這個useEffect要重新被觸發。\n// 有點像是過去我們在componentDidUpdate寫prevState!=this.state這種感覺。(<--What?算了，之後看實例)\n\n// 長得像(1)︰\n// useEffect(() => {\n/* 以此來相等如class component 的︰componentDidMount(已經render了Mount了，然後才去抓資料的動作…)(第一次上線)*/\n//}, []); \n/* 第二個參數是用來限定當哪些變數被改變時useEffect要觸發 */\n\n\n//componentWillUnmount就是useEffect第一個用來當參數的函式的return值。\n\n// 長得像(2)︰\n// useEffect(() => {\n//   /* 以此來相等如class component 的︰componentDidMount(已經render了Mount了，然後才去抓資料的動作…)(第一次上線)*/  \n//   return (() => { //<-----這個是重點！\n//   /* 以此來相等如class component 的︰componentWillUnmount (當這個元素消失的時候要做什麼)*/    \n//   });  \n// }, []); \n/* 第二個參數是用來限定當哪些變數被改變時useEffect要觸發 */\n\n//如果想要實現componentDidUpdate，\n//應該要搭配另外一個React hook: useRef。\n//也就是我們用useRef去產生一個紀錄:是否完成第一次渲染的變數，\n//初始值預設會給false，第一次執行effect後改為true。\n\n// 長得像(3)︰\n// const mounted=useRef(); //這個bool！是重點\n//     useEffect(()=>{\n//       if(mounted.current===false){ //第一次進來，預設為false\n//         mounted.current=true;\n//         /*以此來相等如class component 的︰componentDidMount*/   \n//       }\n//       else{ // (因為dependencies參數改變而觸發的︰)第二次開始，就跑進來這裡\n//         /*以此來相等如class component 的︰componentDidUpdate */\n//       }\n//       return (()=>{\n//         /*以此來相等如class component 的︰componentWillUnmount */\n//       })\n//     },[以此來相等如class component 的︰status屬性]); /* 第二個參數是用來限定當哪些變數被改變時useEffect要觸發 */\n\n\n//下面省略了第二個參數[]，也是componentDidMount 和 componentDidUpdate集合體:\n// 長得像(4)︰\n// useEffect(() => {\n//   /* componentDidMount 和  componentDidUpdate (每次都做，不分初或多次)*/\n//   return () => {\n//     /* componentWillUnmount */\n//   };\n// });\n\n\n// 其他︰\n// 可以有多個useEffect存在同一function component和custom hook中 ?\n// 所以我們可以針對不同的變數(?)去寫不同的useEffect。\n\n// #endregion  初步介紹\n\n// #region  function component 的實作，詳見 App2 和 Babay2\n//root.render(<div><App2/></div>)\n// #endregion\n\n// #region ****** Class component 的 傳值問題 ****** :\n\n// (我覺得這父子的關係，不是 extends ，因為 父子皆 extends Component\n// 父子的意思是 App 和 Baby 的關係，index 呼叫 App 呼叫 Baby …\n// index 給值 > App 給值 > Baby )\n\n// #region 父給子值，子改父值，又做成父改子值︰\n// (1)父給方法我 > 我修改了父給我的值 > (2)值的改變讓我的心情很好。\n// 實作︰詳見 Rich_Parent, Rich_Son, Rich_Daughter\n// root.render(<div><Rich_Parent/></div>)\n// (只要不斷求，爸爸就不斷給…所以是富爸爸)\n// #endregion\n\n// #region 同父的子類別之間︰子對子改值\n// 窮的爸爸只有100元，女兒吵，給她多一點，兒子就少一點\n// 女兒開心了，兒子就不開心。\n// 實作︰詳見 Poor_Parent, Poor_Son, Poor_Daughter\n// root.render(<div><Poor_Parent/></div>)\n// #endregion\n\n// #region 祖先對孫子 All In 的 方法一\n\n// 在這個狀況下，階層中間的「兒子」只是一個中繼站的感覺。\n// 就變成是多層父子溝通。\n// 但如果要傳的東西很多，每一層都要綁this.props.名稱會有點麻煩。\n// 方法一︰要運用 spread operator\n// 像︰<GrandSon {...this.props}/>\n// 把Son所有的props全部綁在GrandSon上\n\n// 詳見自創的實作︰GrandPa.js\n// root.render(<GrandPa/>);\n\n// #endregion\n\n// #region 祖先對孫子 All In 的 方法二︰不用綁全部props、又更簡易的方法?(不用其他插件)\n\n// 運用Bracket notation(以中括號存取物件)\n// 在父元素中，定義兩個函式\n// 1.存取資料用: 接收一個名字參數，來取回相應名字的參數。\n// handleSendData(name){\n//   return this.props[name];\n// }\n// 2.存取函式用: 接收兩個參數，第一個是函式名稱，第二個是函式要用的參數array。\n// handleSendFunc(method, ...arg){\n//   return this.props[method](...arg);  //<---這個做不到，詳見︰GrandPaPa\n// } //(...arg)是一個真的可以寫的程式碼嗎？\n\n// 把這兩個函式綁在所有中繼站上(目標子元素也要綁)，\n// 在這個案例中繼站只有一個，所以只要綁目標(孫)子元素。\n// 像︰\n// <GrandSon \n// handleSendData={this.handleSendData} \n// handleSendFunc={this.handleSendFunc} />\n\n// 目標(孫)子元素呼叫這兩個函式︰\n/* 存取綁在Brother.js上的money */\n// let dadMoney=this.handleSendData(\"money\"); // 取父的 money 元素\n\n// 詳見︰\n//root.render(<GrandPaPa/>);\n\n// 類似︰\n/* 呼叫綁在Brother上的argue函式(allocateMoney)。\n「brother」和「5」是原本allocateMoney規定需要的參數。 */\n// this.handleSendFunc(\"argue\",\"brother\",5);  // 使用父的argue方法，傳入參數\"brother\",5。\n\n// #endregion\n\n// #region Global state \n\n// 由於祖先對某代孫子的溝通的情形很常發生，因此後來衍生了產生Global state的官方或第三方插件\n// 其中之一，可參考︰\n// https://ithelp.ithome.com.tw/articles/10216471\n\n// 也打開來看看吧…\n\n\n\n// #endregion\n\n// #region (大補充)在官網上，很好解釋Component的例子(私認為比以上的教材更清楚)︰\n\n// 多層傳值的使用例子︰\n// https://zh-hant.reactjs.org/docs/components-and-props.html\n// 這個例子中，好像把資料打包成「物件」來分別「傳承」會更好。\n// 一個爸爸有多個兒子，每個兒子都給他們不同的物件…兒子再給孫子。\n// 但是如何打包成物件? 請參照 state 的寫法。\n\n// function tick() {\n//   const element = (\n//     <div>\n//       <h1>Hello, world!</h1>\n//       <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//     </div>\n//   );\n//   root.render(element);\n// }\n// setInterval(tick, 1000); // 這個方法，是會自己計時，並一直執行的。\n\n\n// 將 element 抽出為一個 function component \n// 傳一個物件，再取出其屬性。\n// function Clock(props) {\n//   return (\n//     <div>\n//       <h1>Hello, world!</h1>\n//       <h2>It is {props.date.toLocaleTimeString()}.</h2> \n//     </div>\n//   );\n// }\n// function tick() {\n//   root.render(<Clock date={new Date()} />);\n// }\n// setInterval(tick, 1000);\n\n// 理想情況下，我們想要撰寫一次 Clock 並且它會自己更新：\n// root.render(<Clock />);\n\n// 你可以透過以下 5 個步驟轉換一個 function component 像是 Clock 成為 class：\n// 建立一個相同名稱並且繼承 React.Component 的 ES6 class。\n// 加入一個 render() 的空方法。\n// 將 function 的內容搬到 render() 方法。\n// 將 render() 內的 props 替換成 this.props。\n// 刪除剩下空的 function 宣告。\n// class Clock extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello, world!</h1>\n//         <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n//       </div>\n//     );\n//   }\n// }\n//加入 Local State 到 Class\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()}; // 咦，State的寫法，就是物件的寫法…\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello, world!</h1>\n//         <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n//       </div>\n//     );\n//   }\n// }\n// root.render(<Clock />)\n// 但是這個還是不會跳。\n\n//每當 Clock render 到 DOM 的時候，我們想要設定一個 timer。在 React 中稱為「mount」。\n//每當產生的 Clock DOM 被移除時，我們想要清除 timer。在 React 中稱為「unmount」。\n\nclass Clock extends React.Component {\n\n  // 正確的使用 State 用 this.setState\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  // 錯誤 : 不會引發更新\n  // this.state.comment = 'Hello';\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(), // 這個 方法，在掛上的時候，就設定它一秒更新一次。\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID); // timerID這屬性，只是為了進行一個方法？\n  }\n  // 如果 Clock component 從 DOM 被移除了，React 會呼叫 componentWillUnmount() 生命週期方法，所以 timer 會被停止。\n  // 但這裡還沒用到就是了。\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() }; // 咦，State的寫法，就是物件的寫法…\n  }\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n//root.render(<Clock />)\n\n//每當 Clock 輸出被插入到 DOM 時，\n//React 會呼叫 componentDidMount() 生命週期方法。\n//在 Clock component 生命週期方法內，會要求瀏覽器設定 timer 每秒去呼叫 component 的 tick() 方法。\n\n//瀏覽器每秒呼叫 tick() 方法。\n//其中，Clock component 透過包含目前時間的 object 呼叫 setState() 來調度 UI 更新。\n//感謝 setState()，React 現在知道 state 有所改變，\n//並且再一次呼叫 render() 方法來了解哪些內容該呈現在螢幕上。\n//這時候，在 render() 方法內的 this.state.date 將會有所不同，\n//因此 render 輸出將會是更新的時間。React 相應地更新 DOM。\n\n//https://zh-hant.reactjs.org/docs/state-and-lifecycle.html\n\n// React 可以將多個 setState() 呼叫批次處理為單一的更新，以提高效能。\n// 因為 this.props 和 this.state 可能是非同步的被更新，你不應該依賴它們的值來計算新的 state。\n// 例如，這個程式碼可能無法更新 counter：\n// this.setState({ // 錯誤\n//   counter: this.state.counter + this.props.increment,\n// });\n// 使用第二種形式的 setState()，\n// 它是一個 function 而不是一個 object。\n// Function 將接收先前的 state 作為第一個參數，並且將更新的 props 作為第二個參數：\n// 正確\n// this.setState((state, props) => ({\n//   counter: state.counter + props.increment\n// }));\n// -------(or)---------\n// this.setState(function(state, props) {\n//   return {\n//     counter: state.counter + props.increment\n//   };\n// });\n\n// (先接了再做 update，那就肯定那個值還在，還沒被刪除之類的意思？)\n\n//#region 向下資料流\n\n//Parent 和 child 不會知道某個 component 是 stateful 或 stateless 的 component，\n//也不在意它是透過 function 或是 class 被定義的。\n\n//這就是 state 通常被稱為 local state 或被封裝的原因。\n//除了擁有和可以設定它之外的任何 component 都不能訪問它。\n\n//FormattedDate component 會在它的 props 接收到 date，\n//但他不知道它是從 Clock 的 state 傳遞過來的，\n//從 Clock 的 props 或者是透過手動輸入：\nfunction FormattedDate(props) {\n  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;\n}\n\n//想像一個 component tree 是一個 props 的瀑布，\n//每個 component 的 state 像是一個額外的水流源頭，\n//它在任意的某個地方而且往下流。\n//例證\nclass Clock2 extends React.Component {\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      2000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\nclass Clock3 extends React.Component {\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      3000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n//root.render(<div><Clock /><Clock2 /><Clock3 /></div>)\n\n// 這三個時鐘各自在動，每個方法有自己的 render 和 return\n// 證明各自己的 state 是各不相關的，資料是向下流的，state 它是 local state \n\n//#endregion\n\n// 事件處理，是官網教材的下一章，但是已經離開「傳值」的主題太遠了，所以我晚點再看。\n// https://zh-hant.reactjs.org/docs/handling-events.html\n\n// #endregion\n\n\n\nreportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}